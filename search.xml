<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/15/Hexo-Blog/hello-world/"/>
      <url>/2022/04/15/Hexo-Blog/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>写博客要注意的一些问题</title>
      <link href="/2022/04/15/Hexo-Blog/%E5%86%99%E5%8D%9A%E5%AE%A2%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/15/Hexo-Blog/%E5%86%99%E5%8D%9A%E5%AE%A2%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="标题">标题</h2><p>hexo 新建文章后自动生成的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxxxx</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>其实就是一级标题</p><p><img src="/assets/images/Blog-header.png" alt="Blog-header"></p><h2 id="source-posts-文件夹">source/_posts 文件夹</h2><p>hexo 新建的文章自动生成在 source/_posts 文件夹下</p><p>可以通过手工把同一类文章放到同一个文件夹下（比如：Qt 相关的文章都移动到 Qt 文件夹内），而且通过 hexo 生成、部署后的网页并没有影响</p><h2 id="资源文件">资源文件</h2><p>在文章中引用的图片资源</p><p>可以统一放到资源文件夹 source/images，避免资源重复浪费空间、流量</p><p>在文章中通过 <code>![xxx](/assets/images/xxx.png)</code> 引用即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QRegExp</title>
      <link href="/2022/04/15/Qt/QRegExp/"/>
      <url>/2022/04/15/Qt/QRegExp/</url>
      
        <content type="html"><![CDATA[<h2 id="QRegExp-成员函数介绍">QRegExp 成员函数介绍</h2><p>1.<strong><code>QString QRegExp::cap(int nth = 0) const</code></strong></p><p>Returns the text captured by the nth subexpression. The entire match has index 0 and the parenthesized subexpressions have indexes starting from 1 (excluding non-capturing parentheses).</p><blockquote><p>返回第 n 个子表达式捕获的文本。整个匹配的索引为 0，带括号的子表达式的索引从 1 开始（不包括非捕获括号）。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QRegExp <span class="title">rxlen</span><span class="params">(<span class="string">&quot;(\\d+)(?:\\s*)(cm|inch)&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> pos = rxlen.<span class="built_in">indexIn</span>(<span class="string">&quot;Length: 189cm&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    QString value = rxlen.<span class="built_in">cap</span>(<span class="number">1</span>); <span class="comment">// &quot;189&quot;</span></span><br><span class="line">    QString unit = rxlen.<span class="built_in">cap</span>(<span class="number">2</span>);  <span class="comment">// &quot;cm&quot;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The order of elements matched by cap() is as follows. The first element, cap(0), is the entire matching string. Each subsequent element corresponds to the next capturing open left parentheses. Thus cap(1) is the text of the first capturing parentheses, cap(2) is the text of the second, and so on.</p><blockquote><p>cap() 匹配的元素顺序如下。第一个元素 cap(0) 是整个匹配字符串。每个后续元素对应于下一个捕获左括号。因此 cap(1) 是第一个捕获括号的文本，cap(2) 是第二个捕获括号的文本，依此类推。</p></blockquote><p>2.<strong><code>bool QRegExp::exactMatch(const QString &amp;str) const</code></strong></p><p>Returns true if str is matched exactly by this regular expression; otherwise returns false. You can determine how much of the string was matched by calling matchedLength().<br>For a given regexp string R, exactMatch(“R”) is the equivalent of indexIn(“^R$”) since exactMatch() effectively encloses the regexp in the start of string and end of string anchors, except that it sets matchedLength() differently.<br>For example, if the regular expression is blue, then exactMatch() returns true only for input blue. For inputs bluebell, blutak and lightblue, exactMatch() returns false and matchedLength() will return 4, 3 and 0 respectively.</p><blockquote><p>如果 str 与此正则表达式完全匹配，则返回 true； 否则返回假。 您可以通过调用matchedLength() 来确定字符串的匹配程度。<br>对于给定的正则表达式字符串 R，exactMatch(“R”) 等效于 indexIn(“^R$”)，因为exactMatch() 有效地将正则表达式包含在字符串的开头和字符串锚点的结尾，除了它设置matchedLength( ) 不同。<br>例如，如果正则表达式为蓝色，则exactMatch() 仅对输入蓝色返回true。 对于输入 bluebell、blutak 和 lightblue，exactMatch() 返回 false，matchedLength() 将分别返回 4、3 和 0。</p></blockquote><p>3.<strong><code>int QRegExp::indexIn(const QString &amp;str, int offset = 0, QRegExp::CaretMode caretMode = CaretAtZero) const</code></strong></p><p>Attempts to find a match in str from position offset (0 by default). If offset is -1, the search starts at the last character; if -2, at the next to last character; etc.<br>Returns the position of the first match, or -1 if there was no match.<br>The caretMode parameter can be used to instruct whether ^ should match at index 0 or at offset.<br>You might prefer to use QString::indexOf(), QString::contains(), or even QStringList::filter(). To replace matches use QString::replace().</p><blockquote><p>尝试从位置偏移量（默认为 0）在 str 中找到匹配项。 如果 offset 为 -1，则从最后一个字符开始搜索； 如果 -2，则在倒数第二个字符处； 等等<br>返回第一个匹配的位置，如果没有匹配则返回 -1。<br>caretMode 参数可用于指示 ^ 是否应在索引 0 处匹配或在偏移处匹配。<br>你可能更喜欢使用 QString::indexOf()、QString::contains()，甚至是 QStringList::filter()。 要替换匹配项，请使用 QString::replace()。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QString str = <span class="string">&quot;offsets: 1.23 .50 71.00 6.00&quot;</span>;</span><br><span class="line"><span class="function">QRegExp <span class="title">rx</span><span class="params">(<span class="string">&quot;\\d*\\.\\d+&quot;</span>)</span></span>;    <span class="comment">// primitive floating point matching</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((pos = rx.<span class="built_in">indexIn</span>(str, pos)) != <span class="number">-1</span>) &#123;</span><br><span class="line">    ++count;</span><br><span class="line">    pos += rx.<span class="built_in">matchedLength</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pos will be 9, 14, 18 and finally 24; count will end up as 4</span></span><br></pre></td></tr></table></figure><p>Although const, this function sets matchedLength(), capturedTexts() and pos().<br>If the QRegExp is a wildcard expression (see setPatternSyntax()) and want to test a string against the whole wildcard expression, use exactMatch() instead of this function.</p><blockquote><p>虽然返回值是 const，但该函数设置了matchedLength()、cappedTexts() 和pos()。<br>如果 QRegExp 是通配符表达式（请参阅 setPatternSyntax()）并且想要针对整个通配符表达式测试字符串，请使用 exactMatch() 而不是此函数。</p></blockquote><h2 id="示例-2">示例</h2><h3 id="示例1：匹配、获取小括号内容">示例1：匹配、获取小括号内容</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">QString text = <span class="string">&quot;qw2(1,2,3,4)223(342)32(1,,3,4)31we&quot;</span></span><br><span class="line"></span><br><span class="line">QRegExp <span class="built_in">re</span>(<span class="string">&quot;\\(.*\\)&quot;</span>); <span class="comment">// 括号及括号内部的任何字符。</span></span><br><span class="line"><span class="keyword">if</span> (re.<span class="built_in">indexIn</span>(text, <span class="number">0</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">auto</span> ret = re.<span class="built_in">cap</span>(<span class="number">0</span>); <span class="comment">// ret = &quot;(1,2,3,4)223(342)32(1,,3,4)&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QRegExp <span class="title">re</span><span class="params">(<span class="string">&quot;\\([^)]*\\)&quot;</span>)</span></span>; <span class="comment">// 从一个开括号到最近的闭括号。</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">QStringList list;</span><br><span class="line"><span class="keyword">while</span> ((pos = exp.<span class="built_in">indexIn</span>(text, pos)) != <span class="number">-1</span>) &#123;</span><br><span class="line">    list &lt;&lt; exp.<span class="built_in">cap</span>(<span class="number">1</span>);</span><br><span class="line">    pos += exp.<span class="built_in">matchedLength</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; list; <span class="comment">// (1,2,3,4), (342), (1,,3,4)</span></span><br><span class="line"></span><br><span class="line"><span class="function">QRegExp <span class="title">rx</span><span class="params">(<span class="string">&quot;(\\d+)&quot;</span>)</span></span>;</span><br><span class="line">QString str = <span class="string">&quot;Offsets: 12 14 99 231 7&quot;</span>;</span><br><span class="line">QStringList list1;</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = rx.<span class="built_in">indexIn</span>(str, pos)) != <span class="number">-1</span>) &#123;</span><br><span class="line">    list1 &lt;&lt; rx.<span class="built_in">cap</span>(<span class="number">1</span>);</span><br><span class="line">    pos += rx.<span class="built_in">matchedLength</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;list1:&quot;</span> &lt;&lt; list1;</span><br><span class="line"><span class="comment">// list1: [&quot;12&quot;, &quot;14&quot;, &quot;99&quot;, &quot;231&quot;, &quot;7&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="示例2：匹配内容">示例2：匹配内容</h3><blockquote><p>全内容匹配，使用 exactMatch()</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QString text = <span class="string">&quot;(1,2,3,4)&quot;</span>;</span><br><span class="line">QString text1 = <span class="string">&quot;11(1,2,3,4)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">QRegExp <span class="title">exp</span><span class="params">(<span class="string">&quot;\\(.*\\)&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; exp.<span class="built_in">exactMatch</span>(text); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt; exp.<span class="built_in">exactMatch</span>(text1); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 给图片添加水印</title>
      <link href="/2022/04/08/Python/Python-Add-Watermarking/"/>
      <url>/2022/04/08/Python/Python-Add-Watermarking/</url>
      
        <content type="html"><![CDATA[<h2 id="示例">示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_text</span>(<span class="params">img_path, text=<span class="string">&#x27;svinda.github.io&#x27;</span>, show_result_image=<span class="literal">False</span></span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line">    font = ImageFont.truetype(<span class="string">&#x27;C:/windows/fonts/Arial.ttf&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># color = (255, 222, 111)</span></span><br><span class="line">    width, height = img.size</span><br><span class="line">    draw.text((width - <span class="number">150</span>, height - <span class="number">55</span>), text, (<span class="number">14</span>, <span class="number">222</span>, <span class="number">111</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加透明度</span></span><br><span class="line">    draw.text((width - <span class="number">150</span>, height - <span class="number">35</span>), text, (<span class="number">14</span>, <span class="number">222</span>, <span class="number">111</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加字体</span></span><br><span class="line">    draw.text((width - <span class="number">150</span>, height - <span class="number">75</span>), text, (<span class="number">14</span>, <span class="number">222</span>, <span class="number">111</span>), font=font)</span><br><span class="line">    ImageDraw.Draw(img)</span><br><span class="line"></span><br><span class="line">    (path, suffix) = os.path.splitext(img_path)</span><br><span class="line">    <span class="built_in">print</span>(path, suffix)</span><br><span class="line">    img.save(path + <span class="string">&#x27;_watermark.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> show_result_image:</span><br><span class="line">        <span class="comment">## （阻塞）打开添加水印后的图片</span></span><br><span class="line">        img.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多张图片添加同一水印</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_text_all</span>(<span class="params">img_paths=[], text=<span class="string">&#x27;svinda.github.io&#x27;</span>, show_result_image=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> img_path <span class="keyword">in</span> img_paths:</span><br><span class="line">        add_text(img_path, text, show_result_image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    image_path = <span class="string">r&quot;images\hexo-文章插入图片.png&quot;</span></span><br><span class="line">    add_text(image_path, <span class="string">&#x27;svinda.github.io&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add_text_all([<span class="string">r&quot;images\hexo-文章插入图片.png&quot;</span>, <span class="string">r&quot;images\hexo-文章插入图片 - 副本.png&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果图<br><img src="/assets/images/hexo-%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87_watermark.png" alt="插入图片_watermark"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-4-main() 函数分析</title>
      <link href="/2022/04/06/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-4-main()%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/"/>
      <url>/2022/04/06/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-4-main()%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0-程序-main-函数执行流程图">0.程序 <code>main()</code> 函数执行流程图</h2><p><img src="/assets/images/QtCreator-%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="QtCreator-程序入口流程图.png"></p><h2 id="1-Restarter-restarter-argc-argv">1.<code>Restarter restarter(argc, argv)</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Restarter <span class="title">restarter</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> restarter.<span class="built_in">restartOrExit</span>(app.<span class="built_in">exec</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序重启器，用于某些配置修改后，需要重启程序才能够使配置生效。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Restarter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Restarter</span>(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Q_UNUSED</span>(argc)</span><br><span class="line">        m_executable = QString::<span class="built_in">fromLocal8Bit</span>(argv[<span class="number">0</span>]);</span><br><span class="line">        m_workingPath = QDir::<span class="built_in">currentPath</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setArguments</span><span class="params">(<span class="type">const</span> QStringList &amp;args)</span> </span>&#123; m_args = args; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">executable</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_executable; &#125;</span><br><span class="line">    <span class="function">QStringList <span class="title">arguments</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_args; &#125;</span><br><span class="line">    <span class="function">QString <span class="title">workingPath</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_workingPath; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">restartOrExit</span><span class="params">(<span class="type">int</span> exitCode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 根据 &quot;restart&quot; 属性判断是需要重启程序</span></span><br><span class="line">        <span class="keyword">return</span> qApp-&gt;<span class="built_in">property</span>(<span class="string">&quot;restart&quot;</span>).<span class="built_in">toBool</span>() ? <span class="built_in">restart</span>(exitCode) : exitCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">restart</span><span class="params">(<span class="type">int</span> exitCode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 启动进程</span></span><br><span class="line">        QProcess::<span class="built_in">startDetached</span>(m_executable, m_args, m_workingPath);</span><br><span class="line">        <span class="keyword">return</span> exitCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QString m_executable;  <span class="comment">// 可执行程序名称</span></span><br><span class="line">    QStringList m_args;    <span class="comment">// 可执行程序的命令参数</span></span><br><span class="line">    QString m_workingPath; <span class="comment">// 可执行程序所在的工作目录</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-SharedTools-QtSingleApplication-app">2.<code>SharedTools::QtSingleApplication app()</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function">SharedTools::QtSingleApplication <span class="title">app</span><span class="params">((QLatin1String(Core::Constants::IDE_DISPLAY_NAME)),</span></span></span><br><span class="line"><span class="params"><span class="function">                                         numberofArguments,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         options.appArguments.data())</span></span>;</span><br><span class="line">......</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> QT_VERSION &lt; QT_VERSION_CHECK(6, 0, 0)</span></span><br><span class="line">    app.<span class="built_in">setAttribute</span>(Qt::AA_UseHighDpiPixmaps);</span><br><span class="line">    app.<span class="built_in">setAttribute</span>(Qt::AA_DisableWindowContextHelpButton);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">......</span><br><span class="line">    QTranslator translator;</span><br><span class="line">    QTranslator qtTranslator;</span><br><span class="line">......</span><br><span class="line">    app.<span class="built_in">installTranslator</span>(&amp;translator);</span><br><span class="line">    app.<span class="built_in">installTranslator</span>(&amp;qtTranslator);</span><br><span class="line">    app.<span class="built_in">setProperty</span>(<span class="string">&quot;qtc_locale&quot;</span>, locale);</span><br><span class="line">......</span><br><span class="line">    app.<span class="built_in">setDesktopFileName</span>(<span class="string">&quot;org.qt-project.qtcreator.desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> isBlock = foundAppOptions.<span class="built_in">contains</span>(<span class="built_in">QLatin1String</span>(BLOCK_OPTION));</span><br><span class="line">    <span class="keyword">if</span> (app.<span class="built_in">isRunning</span>() &amp;&amp; (pid != <span class="number">-1</span> || isBlock</span><br><span class="line">                            || foundAppOptions.<span class="built_in">contains</span>(<span class="built_in">QLatin1String</span>(CLIENT_OPTION)))) &#123;</span><br><span class="line">        app.<span class="built_in">setBlock</span>(isBlock);</span><br><span class="line">        <span class="keyword">if</span> (app.<span class="built_in">sendMessage</span>(PluginManager::<span class="built_in">serializedArguments</span>(), <span class="number">5000</span> <span class="comment">/*timeout*/</span>, pid))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Message could not be send, maybe it was in the process of quitting</span></span><br><span class="line">        <span class="keyword">if</span> (app.<span class="built_in">isRunning</span>(pid)) &#123;</span><br><span class="line">            <span class="comment">// Nah app is still running, ask the user</span></span><br><span class="line">            <span class="type">int</span> button = <span class="built_in">askMsgSendFailed</span>();</span><br><span class="line">            <span class="keyword">while</span> (button == QMessageBox::Retry) &#123;</span><br><span class="line">                <span class="keyword">if</span> (app.<span class="built_in">sendMessage</span>(PluginManager::<span class="built_in">serializedArguments</span>(), <span class="number">5000</span> <span class="comment">/*timeout*/</span>, pid))</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (!app.<span class="built_in">isRunning</span>(pid)) <span class="comment">// App quit while we were trying so start a new creator</span></span><br><span class="line">                    button = QMessageBox::Yes;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    button = <span class="built_in">askMsgSendFailed</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (button == QMessageBox::No)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set up remote arguments.</span></span><br><span class="line">    QObject::<span class="built_in">connect</span>(&amp;app, &amp;SharedTools::QtSingleApplication::messageReceived,</span><br><span class="line">                     &amp;pluginManager, &amp;PluginManager::remoteArguments);</span><br><span class="line"></span><br><span class="line">    QObject::<span class="built_in">connect</span>(&amp;app, <span class="built_in">SIGNAL</span>(<span class="built_in">fileOpenRequest</span>(QString)), coreplugin-&gt;<span class="built_in">plugin</span>(),</span><br><span class="line">                     <span class="built_in">SLOT</span>(<span class="built_in">fileOpenRequest</span>(QString)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shutdown plugin manager on the exit</span></span><br><span class="line">    QObject::<span class="built_in">connect</span>(&amp;app, &amp;QCoreApplication::aboutToQuit, &amp;pluginManager, &amp;PluginManager::shutdown);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> restarter.<span class="built_in">restartOrExit</span>(app.<span class="built_in">exec</span>());</span><br></pre></td></tr></table></figure><p>QtSingleApplication 提供了每个用户只能启动一次的应用程序的功能。<br>Qt 提供了解决方案组件项目 qtproject/qt-solutions <a href="https://github.com/qtproject/qt-solutions">https://github.com/qtproject/qt-solutions</a><br>Qt Creator 里的 QtSingleApplication 和 qt-solutions 有些不一样</p><p>qtproject/qt-solutions 提供的解决方案项目在另外的篇章展开分析：<a href="../Qt_Document/23.QtSingleApplication.md">QtSingleApplication</a></p><h2 id="3-程序工作环境配置">3.程序工作环境配置</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">QCoreApplication::<span class="built_in">setApplicationName</span>(Core::Constants::IDE_CASED_ID);</span><br><span class="line">QCoreApplication::<span class="built_in">setApplicationVersion</span>(<span class="built_in">QLatin1String</span>(Core::Constants::IDE_VERSION_LONG));</span><br><span class="line">QCoreApplication::<span class="built_in">setOrganizationName</span>(<span class="built_in">QLatin1String</span>(Core::Constants::IDE_SETTINGSVARIANT_STR));</span><br><span class="line">QGuiApplication::<span class="built_in">setApplicationDisplayName</span>(Core::Constants::IDE_DISPLAY_NAME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> cleanup = <span class="built_in">qScopeGuard</span>([] &#123; Utils::Singleton::<span class="built_in">deleteAll</span>(); &#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> QStringList pluginArguments = app.<span class="built_in">arguments</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Initialize global settings and resetup install settings with QApplication::applicationDirPath */</span></span><br><span class="line"><span class="built_in">setupInstallSettings</span>(options.installSettingsPath);</span><br><span class="line">Utils::QtcSettings *settings = <span class="built_in">createUserSettings</span>();</span><br><span class="line"><span class="comment">// static Utils::QtcSettings *createUserSettings()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return new Utils::QtcSettings(QSettings::IniFormat,</span></span><br><span class="line"><span class="comment">//                                   QSettings::UserScope,</span></span><br><span class="line"><span class="comment">//                                   QLatin1String(Core::Constants::IDE_SETTINGSVARIANT_STR),</span></span><br><span class="line"><span class="comment">//                                   QLatin1String(Core::Constants::IDE_CASED_ID));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">Utils::QtcSettings *globalSettings</span><br><span class="line">    = <span class="keyword">new</span> Utils::<span class="built_in">QtcSettings</span>(QSettings::IniFormat,</span><br><span class="line">                             QSettings::SystemScope,</span><br><span class="line">                             <span class="built_in">QLatin1String</span>(Core::Constants::IDE_SETTINGSVARIANT_STR),</span><br><span class="line">                             <span class="built_in">QLatin1String</span>(Core::Constants::IDE_CASED_ID));</span><br><span class="line">Utils::TerminalCommand::<span class="built_in">setSettings</span>(settings);</span><br><span class="line"><span class="built_in">loadFonts</span>();</span><br><span class="line"><span class="comment">// void loadFonts()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     const QDir dir(resourcePath() + &quot;/fonts/&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     const QFileInfoList fonts = dir.entryInfoList(QStringList(&quot;*.ttf&quot;), QDir::Files);</span></span><br><span class="line"><span class="comment">//     for (const QFileInfo &amp;fileInfo : fonts)</span></span><br><span class="line"><span class="comment">//         QFontDatabase::addApplicationFont(fileInfo.absoluteFilePath());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>主要理解这两个代表什么就行了<br><code>QSettings::UserScope</code><br><code>QSettings::SystemScope</code></p><p>TODO：QSettings 需要另外的篇章介绍。</p><h2 id="4-PluginManager-pluginManager">4.<code>PluginManager pluginManager</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PluginManager pluginManager;</span><br><span class="line">PluginManager::<span class="built_in">setPluginIID</span>(<span class="built_in">QLatin1String</span>(<span class="string">&quot;org.qt-project.Qt.QtCreatorPlugin&quot;</span>));</span><br><span class="line">PluginManager::<span class="built_in">setGlobalSettings</span>(globalSettings);</span><br><span class="line">PluginManager::<span class="built_in">setSettings</span>(settings);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 读取所有路径下的插件属性信息</span></span><br><span class="line">PluginManager::<span class="built_in">setPluginPaths</span>(pluginPaths);</span><br><span class="line">...</span><br><span class="line">PluginManager::<span class="built_in">checkForProblematicPlugins</span>();</span><br><span class="line"><span class="comment">// 加载插件</span></span><br><span class="line">PluginManager::<span class="built_in">loadPlugins</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtCreator </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-3-程序入口</title>
      <link href="/2022/04/06/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-3-%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3/"/>
      <url>/2022/04/06/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-3-%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="分析程序入口">分析程序入口</h2><p>在键盘上按下 F10 键，Qt Creator 便会启动调试并且自动定位到 <code>main()</code> 函数处，在不知道程序入口的情况下，这种方法是最好用的。<br>如果是知道程序入口，那么可以在入口处打上断点，然后启动调试，也会定位到断点处。</p>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtCreator </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-2-目录分析</title>
      <link href="/2022/04/05/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2-%E7%9B%AE%E5%BD%95%E5%88%86%E6%9E%90/"/>
      <url>/2022/04/05/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2-%E7%9B%AE%E5%BD%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="目录树">目录树</h2><p>qt-creator-opensource-src-7.0.0 目录树</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">qt-creator-opensource-src-7.0.0:</span><br><span class="line">├─bin</span><br><span class="line">├─cmake</span><br><span class="line">├─coin</span><br><span class="line">├─dist</span><br><span class="line">├─doc</span><br><span class="line">├─qbs</span><br><span class="line">├─scripts</span><br><span class="line">├─share</span><br><span class="line">├─src</span><br><span class="line">└─test</span><br></pre></td></tr></table></figure><!-- bin: 生成Linux平台shell脚本。dist: 安装文件配置信息和版本更新记录。doc: 生成doxygen文档的配置文件。lib:Qt组件相关的QML文件qbs:QBS 配置文件。QBS，即 Qt Build Suite，是一种跨平台的编译工具，目的是将高层的项目描述（使用类似QML的语言）转换成底层的编译描述（供 make 等工具使用的信息）。它可以简化多平台的编译过程。QBS与qmake类似，区别在于前者适用于任意项目，而后者一般仅供Qt项目使用。在阅读代码时将关注 qmake，不会深入研究QBS的使用。scripts: QtCreator使用的perl以及python等脚本。share: 源代码中所需要的一些非代码共享文件，例如代码模板等。src: QtCreator源代码文件。tests: QtCreator测试代码。HACKING: QtCreator编码规范。LICENSE.LGPL: LGPL协议。qtcreator.pri: QtCreator项目需要使用的通用配置，一般会被include到大部分 pro文件。qtcreator.pro: QtCreator的qmake项目文件。qtcreator.qbs:  Qt Creator 的 QBS 项目文件。README: 有关如何编译QtCreator等相关事宜的一些说明。.gitignore: git忽略文件配置。.gitmodules:git 子模块配置 --><h2 id="目录说明">目录说明</h2><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>生成Linux平台shell脚本。</td></tr><tr><td>cmake</td><td>cmake扩展文件</td></tr><tr><td>coin</td><td>用于Qt Creator 持续集成部署的一些yaml脚本</td></tr><tr><td>dist</td><td>安装文件配置信息和版本更新记录。</td></tr><tr><td>doc</td><td>生成doxygen文档的配置文件。</td></tr><tr><td>qbs</td><td>.qbs配置文件。qbs(Qt Build Suite)是一种跨平台的编译工具。</td></tr><tr><td>scripts</td><td>QtCreator使用的perl以及python等脚本。</td></tr><tr><td>share</td><td>源代码中所需要的一些非代码共享文件，例如代码模板等。</td></tr><tr><td>src</td><td>QtCreator源代码文件。</td></tr><tr><td>test</td><td>QtCreator测试代码。</td></tr></tbody></table><h2 id="代码文件分析">代码文件分析</h2><p>使用 <a href="https://github.com/AlDanial/cloc">cloc</a> 对 qt-creator-opensource-src-7.0.0\src 进行统计分析</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">$&gt;cloc-1.92.exe D:\QtSource\qt-creator-opensource-src-7.0.0\src</span><br><span class="line">   13515 text files.</span><br><span class="line">   12511 unique files.</span><br><span class="line">    2485 files ignored.</span><br><span class="line"></span><br><span class="line">github.com/AlDanial/cloc v 1.92  T=19.60 s (638.2 files/s, 133709.7 lines/s)</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">Language                             files          blank        comment           code</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">C++                                   4125         183463         165252        1004980</span><br><span class="line">C/C++ Header                          4464          84265         143565         283244</span><br><span class="line">C                                      108          16768          77301         182758</span><br><span class="line">JavaScript                            1337          22995          67899         116613</span><br><span class="line">XML                                     73            976           1177          75675</span><br><span class="line">QML                                   1391           5956           8626          50085</span><br><span class="line">Qt                                     203             24              0          37726</span><br><span class="line">SVG                                     15             10             14          19945</span><br><span class="line">ANTLR Grammar                            4           1670            388          10959</span><br><span class="line">CMake                                  214            730            248           9788</span><br><span class="line">Python                                  35           1403            995           7506</span><br><span class="line">YAML                                    20             71            486           6538</span><br><span class="line">diff                                    13            195           2969           4419</span><br><span class="line">Objective-C++                           26            347            536           1904</span><br><span class="line">yacc                                     5            297             54           1847</span><br><span class="line">Markdown                                57            529              0           1828</span><br><span class="line">Assembly                                59            101            661           1683</span><br><span class="line">Qt Project                             138            408             23           1652</span><br><span class="line">Bourne Shell                            33            279           1076           1180</span><br><span class="line">JSON                                    40             35              0           1113</span><br><span class="line">CSS                                      9            185             28            909</span><br><span class="line">Java                                    31            135            217            693</span><br><span class="line">Perl                                     6            110            134            647</span><br><span class="line">Dockerfile                               8            103            136            562</span><br><span class="line">XSD                                      1             24            307            370</span><br><span class="line">Objective-C                             12             96            289            357</span><br><span class="line">ProGuard                                 5             64             30            242</span><br><span class="line">Qt Linguist                              5              0              0            193</span><br><span class="line">GLSL                                    12             52            293            175</span><br><span class="line">Bourne Again Shell                       1             37              1            155</span><br><span class="line">lex                                      8             48             76            148</span><br><span class="line">TypeScript                               8             20              1            125</span><br><span class="line">Protocol Buffers                         9             30             28             93</span><br><span class="line">WiX <span class="built_in">source</span>                               4              9              0             77</span><br><span class="line">Prolog                                   4             13             98             76</span><br><span class="line">Windows Resource File                    5             10              1             62</span><br><span class="line">DOS Batch                                6             24             49             54</span><br><span class="line">C<span class="comment">#                                       4              1              0             41</span></span><br><span class="line">Windows Module Definition                2              0              0             32</span><br><span class="line">sed                                      1              2              1             22</span><br><span class="line">PowerShell                               1              3              0             20</span><br><span class="line">HTML                                     1              0              0             18</span><br><span class="line">Visual Basic .NET                        1              0              0              7</span><br><span class="line">Meson                                    1              1              0              6</span><br><span class="line">MATLAB                                   2              0              0              5</span><br><span class="line">IDL                                      1              1              0              2</span><br><span class="line">F<span class="comment">#                                       1              0              0              1</span></span><br><span class="line">INI                                      1              0              0              1</span><br><span class="line">WiX string localization                  1              0              0              1</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">SUM:                                 12511         321490         472959        1826537</span><br><span class="line">---------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="构建项目配置文件">构建项目配置文件</h2><p>就我所用到用于 Qt 工程构建的配置文件方式有三种：<code>xx.qbs</code> <code>xx.pro</code> <code>CMakeLists.txt</code></p><p>但是这里 Qt Creator 7.0.0 只提供了 qbs 和 CMakeLists.txt 这两种构建方式</p>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtCreator </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-1-环境配置</title>
      <link href="/2022/04/05/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/04/05/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Qt-Creator-简介">Qt Creator 简介</h2><p><strong>Qt Creator 在 GitHub 上的仓库</strong>：<a href="https://github.com/qt-creator/qt-creator">https://github.com/qt-creator/qt-creator</a></p><p>目前需要关注的地方如下原文：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Qt Creator</span><br><span class="line"></span><br><span class="line">Qt Creator is a cross-platform, integrated development environment (IDE)</span><br><span class="line">for application developers to create applications for multiple desktop, embedded,</span><br><span class="line">and mobile device platforms.</span><br><span class="line"></span><br><span class="line">The Qt Creator Manual is available at:</span><br><span class="line"></span><br><span class="line">https://doc.qt.io/qtcreator/index.html</span><br><span class="line"></span><br><span class="line">For an overview of the Qt Creator IDE, see:</span><br><span class="line"></span><br><span class="line">https://doc.qt.io/qtcreator/creator-overview.html</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Compiling Qt Creator</span><br><span class="line"></span><br><span class="line">Prerequisites:</span><br><span class="line"></span><br><span class="line">    Qt 5.15.2 or later</span><br><span class="line">    Qt WebEngine module for QtWebEngine based help viewer</span><br><span class="line">    On Windows:</span><br><span class="line">        MinGW with GCC 7 or Visual Studio 2017 or later</span><br><span class="line">        Python 3.5 or later (optional, needed for the python enabled debug helper)</span><br><span class="line">        Debugging Tools for Windows (optional, for MSVC debugging support with CDB)</span><br><span class="line">    On Mac OS X: latest Xcode</span><br><span class="line">    On Linux: GCC 7 or later</span><br><span class="line">    LLVM/Clang 10 or later (optional, LLVM/Clang 13 is recommended. See instructions on how to get LLVM.</span><br><span class="line">    The ClangFormat, ClangPchManager and ClangRefactoring use the LLVM C++ API.</span><br><span class="line">    Since the LLVM C++ API provides no compatibility guarantee, </span><br><span class="line">    if later versions don&#x27;t compile we don&#x27;t support that version.)</span><br><span class="line">    CMake</span><br><span class="line">    Ninja (recommended)</span><br><span class="line"></span><br><span class="line">The used toolchain has to be compatible with the one Qt was compiled with.</span><br></pre></td></tr></table></figure><p>Qt Creator 是一个跨平台的集成开发环境（IDE），供应用程序开发人员为多个桌面、嵌入式和移动设备平台创建应用程序。</p><p>Qt Creator 手册可从以下网站获得：<br><a href="https://doc.qt.io/qtcreator/index.html">https://doc.qt.io/qtcreator/index.html</a></p><p>有关Qt Creator IDE的概述，请参阅：<br><a href="https://doc.qt.io/qtcreator/creator-overview.html">https://doc.qt.io/qtcreator/creator-overview.html</a></p><p>……</p><p>编译 Qt Creator</p><p>前提条件：</p><ul><li>Qt 5.15.2 或更高版本</li><li>基于 QtWebEngine 的帮助查看器的 Qt WebEngine 模块</li><li>在 Windows 上：<ul><li>MinGW 与 GCC 7 或 Visual Studio 2017 或更高版本</li><li>Python 3.5 或更高版本（可选，支持 Python 的调试助手需要）</li><li>Windows 调试工具（可选，用于 CDB 的 MSVC 调试支持）</li></ul></li><li>在 Mac OS X 上：最新的 Xcode</li><li>在 Linux上：GCC 7 或更高版本</li><li>LLVM/CLAN 10 或更高版本（可选的，LLVM/CLAN 13）。参见如何获得 LLVM 的说明。ClangFormat，CLANPCHCHEMANDION 和 CLAGReF 重构使用 LLVM C++ API。由于 LLVM C++ API 没有提供兼容性保证，如果以后的版本不编译，我们不支持该版本。</li><li>CMake</li><li>Ninja（推荐）</li></ul><p>使用的工具链必须与编译Qt时使用的工具链兼容。</p><h2 id="环境说明">环境说明</h2><ul><li>Windows 10</li><li>Qt 5.15.2 MSVC 2019 64 bit</li><li>Qt Creator 7.0.0</li><li>磁盘空间至少要有 15G 空间</li></ul><h2 id="Qt-5-15-2-安装">Qt 5.15.2 安装</h2><p>自 Qt 5.15 开始，Qt 公司不再提供开源脱机安装程序，相关文章：<a href="https://www.qt.io/blog/qt-offering-changes-2020">https://www.qt.io/blog/qt-offering-changes-2020</a></p><p>可以通过 Qt 提供的在线安装器<a href="https://download.qt.io/official_releases/online_installers/">qt-unified-windows-x86-online.exe</a>来安装，但是需要注册 Qt 账户。</p><p><img src="/assets/images/QtCreator-Qt%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85%E5%99%A8.png" alt="QtCreator-Qt在线安装器"></p><p>双击启动 qt-unified-windows-x86-online.exe 注册账户后(已有账户跳过)，登录，勾选一些必勾选项后，把 Qt 5.15.2 打上勾，确定后便开始下载安装了，这个过程消耗的时间比较长。</p><h2 id="获取并编译-Qt-Creator-7-0-0-源码">获取并编译 Qt Creator 7.0.0 源码</h2><p><a href="https://download.qt.io/official_releases/qtcreator/7.0/7.0.0/">Qt Creator 7.0.0</a> <code>https://download.qt.io/official_releases/qtcreator/7.0/7.0.0/</code><br><img src="/assets/images/QtCreator-%E8%8E%B7%E5%8F%96%E6%BA%90%E7%A0%81.png" alt="QtCreator-获取源码"></p><p>这里提供了源码的三种方式压缩包，随便下载一个即可。</p><ol><li>解压到一个你认为比较赏心悦目的目录下</li><li>启动安装好的 Qt Creator (安装 Qt 5.15.2)</li><li>打开解压后 qt-creator-opensource-src-7.0.0 目录里的 qtcreator.qbs 勾选配置 Qt 5.15.2 MSVC 2019 64 bit<br>或者打开 CMakeLists.txt 勾选配置 Qt 6.2.1 MinGW 64 bit</li><li>点击编译即可</li></ol><p><img src="/assets/images/QtCreator-qbs-build.png" alt="QtCreator-qbs-build"><br><img src="/assets/images/QtCreator-cmake-build.png" alt="QtCreator-cmake-build"></p><p>编译完成后，运行。</p><p><img src="/assets/images/QtCreator-%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90.png" alt="QtCreator-编译完成"></p>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtCreator </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-0-序</title>
      <link href="/2022/04/05/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-0-%E5%BA%8F/"/>
      <url>/2022/04/05/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-0-%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>有打算分析 Qt Creator 源码的想法已经很久了，偶尔也会写一点，但是断断续续……</p><p>在做项目期间也有使用 Qt Creator 源码里的插件系统。</p><p>本着学习和提升的目的，开始写 Qt Creator 源码分析文章。</p><h2 id="目录">目录</h2><!-- markdown 的语法在 Hexo 中不兼容[Qt Creator 源码分析-1-环境配置](../QtCreator源码分析-1-环境配置)[Qt Creator 源码分析-2-目录分析](../QtCreator源码分析-2-目录分析)[Qt Creator 源码分析-3-程序入口](../QtCreator源码分析-3-程序入口)[Qt Creator 源码分析-4-main() 函数分析](../QtCreator源码分析-4-main()函数分析)--><!-- <a href="#">Post not found: 文章文件名（不要后缀） 文章标题（可选）</a> --><ul><li><a href="#">Post not found: QtCreator源码分析-0-序 Qt Creator 源码分析-0-序</a></li><li><a href="#">Post not found: QtCreator源码分析-1-环境配置 Qt Creator 源码分析-1-环境配置</a></li><li><a href="#">Post not found: QtCreator源码分析-2-目录分析 Qt Creator 源码分析-2-目录分析</a></li><li><a href="#">Post not found: QtCreator源码分析-3-程序入口 Qt Creator 源码分析-3-程序入口</a></li><li><a href="#">Post not found: QtCreator源码分析-4-main()函数分析 Qt Creator 源码分析-4-main() 函数分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtCreator </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images-6</title>
      <link href="/2022/04/02/Hexo-Blog/Test-Images-6/"/>
      <url>/2022/04/02/Hexo-Blog/Test-Images-6/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images-6">Test-Images-6</h2><p>测试图片显示</p><p><img src="/assets/images/%E5%A4%B4%E5%83%8F.jpg" alt="头像"></p><p><img src="/assets/images/arrow_top_hover.png" alt="arrow_top_hover"></p><p>Test-Images-6</p><p><img src="/assets/images/art-car.png" alt="art-car"></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images-5</title>
      <link href="/2022/04/01/Hexo-Blog/Test-Images-5/"/>
      <url>/2022/04/01/Hexo-Blog/Test-Images-5/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images-4-2">Test-Images-4</h2><p>测试图片显示</p><p>Test-Images-5</p><p><img src="/assets/images/art-car.png" alt="art-car"></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images-4</title>
      <link href="/2022/04/01/Hexo-Blog/Test-Images-4/"/>
      <url>/2022/04/01/Hexo-Blog/Test-Images-4/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images-4">Test-Images-4</h2><p>测试图片显示</p><p><img src="/assets/images/nvm-install-nodejs-error.png" alt="nvm-install-nodejs-error"></p><p>Test-Images-4</p><p><img src="/assets/images/art.png" alt="art"></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images-3</title>
      <link href="/2022/04/01/Hexo-Blog/Test-Images-3/"/>
      <url>/2022/04/01/Hexo-Blog/Test-Images-3/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images-3">Test-Images-3</h2><p>测试图片显示</p><p><img src="/assets/images/hexo-theme.png" alt="hexo-theme"></p><p>Test-Images-3</p><p><img src="/assets/images/refresh_hover.png" alt="hexo-themeTest-Images-3"></p><p>end.</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images</title>
      <link href="/2022/04/01/Hexo-Blog/Test-images/"/>
      <url>/2022/04/01/Hexo-Blog/Test-images/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images">Test-Images</h2><p>在另一个工作环境编写博客<br><img src="/assets/images/blog.png" alt="blog"><br>![blog-1]/images/(blog-1.png)<br><img src="/assets/images/blog-2.png" alt="blog-2"></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog-env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Edit-Blog-With-Another-Workspace</title>
      <link href="/2022/04/01/Hexo-Blog/Edit-Blog-With-Another-Workspace/"/>
      <url>/2022/04/01/Hexo-Blog/Edit-Blog-With-Another-Workspace/</url>
      
        <content type="html"><![CDATA[<h2 id="Edit-Blog-With-Another-Workspace">Edit-Blog-With-Another-Workspace</h2><p>在另一个工作环境编写博客<br><img src="/assets/images/blog.png" alt="blog"><br><img src="/assets/images/blog-1.png" alt="blog-1"><br><img src="/assets/images/blog-2.png" alt="blog-2"></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog-env </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
