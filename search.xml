<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Qt实战-获取Windows空闲时间</title>
      <link href="/2022/08/21/Qt/QtExamples/Qt%E5%AE%9E%E6%88%98-%E8%8E%B7%E5%8F%96Windows%E7%A9%BA%E9%97%B2%E6%97%B6%E9%97%B4/"/>
      <url>/2022/08/21/Qt/QtExamples/Qt%E5%AE%9E%E6%88%98-%E8%8E%B7%E5%8F%96Windows%E7%A9%BA%E9%97%B2%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="获取-Windows-空闲时间">获取 Windows 空闲时间</h2><p>通过判断鼠标键盘的输入来获取 Windows 空闲时间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winuser.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sysinfoapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DoSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;start do...&quot;</span>;</span><br><span class="line">    std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">10</span>));</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;end.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintLastInput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">        LASTINPUTINFO input;</span><br><span class="line">        <span class="type">div_t</span> iTime = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        input.cbSize = <span class="built_in">sizeof</span>(LASTINPUTINFO);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GetLastInputInfo</span>(&amp;input)) &#123;</span><br><span class="line">            iTime = <span class="built_in">div</span>((<span class="built_in">GetTickCount</span>() - input.dwTime), <span class="number">1000</span>);</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; iTime.quot;</span><br><span class="line">            <span class="keyword">if</span> (iTime.quot &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="built_in">DoSomething</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用子线程获取系统空闲时间，并在一定时间后做一些事情</span></span><br><span class="line">    std::<span class="built_in">thread</span>([]()&#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;start thread: PrintLastInput...&quot;</span>;</span><br><span class="line">        <span class="built_in">PrintLastInput</span>();</span><br><span class="line">    <span class="comment">//&#125;).join(); // 立刻执行线程</span></span><br><span class="line">    &#125;).<span class="built_in">detach</span>();</span><br><span class="line">    <span class="comment">// 从 thread 对象分离执行线程，允许执行独立地持续。</span></span><br><span class="line">    <span class="comment">// 一旦该线程退出，则释放任何分配的资源。</span></span><br><span class="line">    <span class="comment">// 调用 detach 后 *this 不再占有任何线程。 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;sleep...&quot;</span>;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QtExamples </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtExamples </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS2019编译调试火狐浏览器源码</title>
      <link href="/2022/08/05/OpenSourceProjects/Firefox/VS2019%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%81%AB%E7%8B%90%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BA%90%E7%A0%81/"/>
      <url>/2022/08/05/OpenSourceProjects/Firefox/VS2019%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%81%AB%E7%8B%90%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="VS2019-编译调试火狐浏览器源码">VS2019 编译调试火狐浏览器源码</h2><h2 id="官方提供的编译文档">官方提供的编译文档</h2><blockquote><p>注意：官方提供的编译文档会更新，以下方法可能不适用于最新的源码编译方式</p></blockquote><p><a href="https://firefox-source-docs.mozilla.org/setup/windows_build.html">在Windows上构建Firefox</a><br><a href="https://firefox-source-docs.mozilla.org/build/buildsystem/visualstudio.html#visual-studio-projects">Visual Studio项目</a></p><h2 id="前期准备">前期准备</h2><ul><li>安装 <a href="https://visualstudio.microsoft.com/zh-hans/downloads/">Visual Studio</a></li><li>安装 <a href="https://www.rust-lang.org/zh-CN/tools/install">Rust</a></li><li>安装 <a href="https://ftp.mozilla.org/pub/mozilla.org/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe">MozillaBuild</a></li></ul><h3 id="安装Rust">安装Rust</h3><p><img src="/assets/images/mozilla-build-8.png" alt="rust"><br><img src="/assets/images/mozilla-build-7.png" alt="rust version"></p><h3 id="启动shell">启动shell</h3><p>在安装完成MozillaBuild后启动start-shell.bat，以后的操作都将会在启动的shell中进行。</p><p><img src="/assets/images/mozilla-build-5.png" alt="start-shell.bat"></p><h2 id="在线下载源码">在线下载源码</h2><p>在shell中打开到指定的目录</p><p><img src="/assets/images/mozilla-build-6.png" alt="open source dir"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">$ hg <span class="built_in">clone</span> https://hg.mozilla.org/mozilla-central</span></span><br></pre></td></tr></table></figure><p>如果遇到shell请求输入，一路 y 下去就行了</p><h2 id="配置编译源码">配置编译源码</h2><blockquote><p>$ mach bootstrap</p><p>Please choose the version of Firefox you want to build:</p><ol><li>Firefox for Desktop Artifact Mode</li><li>Firefox for Desktop</li><li>GeckoView/Firefox for Android Artifact Mode</li><li>GeckoView/Firefox for Android</li></ol></blockquote><p>这里输入 2</p><p>重启 shell（start-shell.bat ），并打开到源码目录</p><p>执行配置</p><blockquote><p>$ mach configure</p></blockquote><p>使用VisualStudio作为编译工具</p><blockquote><p>$ mach build-backend -b VisualStudio</p></blockquote><p>生成解决方案（.sln）目录如下：</p><p><img src="/assets/images/mozilla-build-9.png" alt="sln"></p><h2 id="使用VS2019编译源码">使用VS2019编译源码</h2><p>打开mozilla.sln</p><p><img src="/assets/images/mozilla-build-3.png" alt="mozilla vs"></p><p>生成解决方案，经过一两个小时即可得到编译文件：</p><p><img src="/assets/images/mozilla-build-10.png" alt="bin"></p><h2 id="调试">调试</h2><p>把<code>firefox.exe</code>项设置为启动项，按<code>F5</code>开始调试：</p><p><img src="/assets/images/mozilla-build-11.png" alt="debuging"></p><p>如果不知道程序入口在哪里，试试<code>F10</code>进入单步执行</p><p><img src="/assets/images/mozilla-build-12.png" alt="debuging"></p><p>程序入口</p><p><img src="/assets/images/mozilla-build-13.png" alt="debuging"></p><h3 id="调试窗口拖放">调试窗口拖放</h3><p>从程序入口调试，却找不到创建主窗口的代码</p><p><img src="/assets/images/mozilla-build-19.png" alt="debuging"></p><p>把firefox.exe附加到进程中</p><p><img src="/assets/images/mozilla-build-16.png" alt="debuging"><br><img src="/assets/images/mozilla-build-17.png" alt="debuging"></p><p>部分断点位置</p><p><img src="/assets/images/mozilla-build-14.png" alt="debuging"><br><img src="/assets/images/mozilla-build-15.png" alt="debuging"></p><p>如果遇到卡住了，那么如下图操作，然后重新启动调试-&gt;附加进程</p><p><img src="/assets/images/mozilla-build-18.png" alt="debuging"></p>]]></content>
      
      
      <categories>
          
          <category> Firefox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Firefox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLC源码分析-新知识</title>
      <link href="/2022/07/04/OpenSourceProjects/VLC/%E6%96%B0%E7%9F%A5%E8%AF%86-VLC/"/>
      <url>/2022/07/04/OpenSourceProjects/VLC/%E6%96%B0%E7%9F%A5%E8%AF%86-VLC/</url>
      
        <content type="html"><![CDATA[<h2 id="新知识-VLC">新知识-VLC</h2><blockquote><p>通过 VLC Media Player 开源项目了解到一些自己未知的知识。</p></blockquote><ul><li>1.GNU gettext 为程序的国际化i18n和本地化l10n提供了很好的支持。 <a href="https://www.gnu.org/software/gettext/">https://www.gnu.org/software/gettext/</a><br>可以使用文本编辑或POedit来修改.po文件，添加相应的翻译语句。 <a href="https://github.com/vslavik/poedit">https://github.com/vslavik/poedit</a><blockquote><p>TODO: 编写文章介绍、了解如何使用及代码例子</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> vlc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> vlc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLC源码分析-1-VS2013编译VLC源码</title>
      <link href="/2022/07/04/OpenSourceProjects/VLC/VLC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-VS2013%E7%BC%96%E8%AF%91VLC%E6%BA%90%E7%A0%81/"/>
      <url>/2022/07/04/OpenSourceProjects/VLC/VLC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-VS2013%E7%BC%96%E8%AF%91VLC%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="VLC-源码分析：VS2013-编译-VLC-源码">VLC 源码分析：VS2013 编译 VLC 源码</h2><h2 id="前提准备">前提准备</h2><p>在 GitHub 上有人已经弄好可以使用 VS 2013 编译 vlc-2.2.6.32 版本的代码<br><a href="https://github.com/sunqueen/vlc-2.2.6.32-2013">https://github.com/sunqueen/vlc-2.2.6.32-2013</a></p><p>所以，这就要安装 vs2013_update4（可以到 <a href="https://msdn.itellyou.cn/">i tell you</a> 下载，这里提供我下载的 <a href="ed2k://%7Cfile%7Ccn_visual_studio_professional_2013_with_update_4_x86_dvd_5935706.iso%7C7557046272%7C4B201FA2D6B219ADE84E2398535D7389%7C/">ed2k</a> ）<br><img src="/assets/images/vs2013_update4.png" alt="vs2013_update4"></p><p>Windows 10 最新 SDK</p><h2 id="编译-调试">编译 &amp; 调试</h2><p><img src="/assets/images/vlc-WinMain.png" alt="vlc-WinMain"></p><p><img src="/assets/images/vlc-run.png" alt="vlc-run"></p>]]></content>
      
      
      <categories>
          
          <category> vlc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> vlc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLC源码分析-0-序</title>
      <link href="/2022/07/04/OpenSourceProjects/VLC/VLC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-0-%E5%BA%8F/"/>
      <url>/2022/07/04/OpenSourceProjects/VLC/VLC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-0-%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="VLC-源码分析：序">VLC 源码分析：序</h2><p>为了了解 VLC Media Player 如何使用 Qt 创建 UI</p>]]></content>
      
      
      <categories>
          
          <category> vlc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> vlc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tiled-1-编译</title>
      <link href="/2022/07/04/OpenSourceProjects/Tiled/Tiled-1-%E7%BC%96%E8%AF%91/"/>
      <url>/2022/07/04/OpenSourceProjects/Tiled/Tiled-1-%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Tiled-源码分析：编译">Tiled 源码分析：编译</h2><h2 id="介绍">介绍</h2><p>Tiled 是一个 2D 级别的编辑器，可帮助您开发游戏内容。它的主要功能是编辑各种形式的平铺地图，但它也支持免费的图像放置以及功能强大的方式来注释游戏使用的额外信息的水平。<br><a href="https://doc.mapeditor.org/en/stable/manual/introduction/#getting-started">Tiled-introduction</a></p><p><img src="/assets/images/Tiled.png" alt="Tiled"></p><h2 id="源码">源码</h2><p><a href="https://github.com/mapeditor/tiled">github-tiled</a></p><h2 id="编译">编译</h2><p>使用 QtCreator 打开 <code>tiled.qbs</code> Build &amp; Run<br><img src="/assets/images/Tiled-build.png" alt="Tiled-build"></p>]]></content>
      
      
      <categories>
          
          <category> vlc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Tiled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt实战-QtSendMessage进程通信</title>
      <link href="/2022/05/24/Qt/QtExamples/Qt%E5%AE%9E%E6%88%98-QtSendMessage%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/05/24/Qt/QtExamples/Qt%E5%AE%9E%E6%88%98-QtSendMessage%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Qt实战-Qt-SendMessage-进程通信">Qt实战-Qt SendMessage 进程通信</h2><h2 id="名词解释">名词解释</h2><p>PostMessage 是 Windows API(应用程序接口) 中的一个常用函数，用于将一条消息放入到消息队列中。并且不会等待响应的线程处理消息，而是直接返回。（简单的理解就是异步）。</p><p>而 SendMessage 作用一样，但是会等待结果返回（同步）</p><p>我们先来看 PostMessag 函数的原型：</p><p>hWnd：其窗口程序接收消息的窗口的句柄。可取有特定含义的两个值：</p><p>HWND_BROADCAST：消息被寄送到系统的所有顶层窗口，包括无效或不可见的非自身拥有的窗口、 被覆盖的窗口和弹出式窗口。消息不被寄送到子窗口</p><p>NULL：此函数的操作和调用参数 dwThread 设置为当前线程的标识符 PostThreadMessage 函数一样</p><p>Msg：指定被寄送的消息。</p><p>wParam：指定附加的消息特定的信息。</p><p>LParam：指定附加的消息特定的信息。</p><p>返回值：如果函数调用成功，返回非零，否则函数调用返回值为零</p><p>接收的时候，使用 QT5 中的方法是 在接收的类中，重新实现 nativeEvent 函数（Qt4的时候使用的是 winEvent,从 Qt5 开始，就使用 nativeEvent ）,这个方法既可以拦截系统消息，也可以拦截通过 postMessage,sendMessage 发送的自定义消息。</p><h2 id="例子">例子</h2><p>需求：要求程序 A 以 tab 标签形式嵌套到程序 B 中</p><p>部分核心代码</p><p>嵌套</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> window = QWindow::<span class="built_in">fromWinId</span>((WId)hwnd);</span><br><span class="line"><span class="keyword">if</span> (window) &#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;createWindowContainer.............&quot;</span>;</span><br><span class="line">    window-&gt;<span class="built_in">setFlags</span>(window-&gt;<span class="built_in">flags</span>() | Qt::CustomizeWindowHint | Qt::WindowTitleHint);</span><br><span class="line">    QWidget *containerWidget = <span class="keyword">new</span> QWidget;</span><br><span class="line">    containerWidget-&gt;<span class="built_in">setObjectName</span>(<span class="string">&quot;containerWidget&quot;</span>);</span><br><span class="line">    containerWidget-&gt;<span class="built_in">setProperty</span>(<span class="string">&quot;processID&quot;</span>, processID);</span><br><span class="line">    containerWidget-&gt;<span class="built_in">setProperty</span>(<span class="string">&quot;winID&quot;</span>, jsObj.<span class="built_in">value</span>(<span class="string">&quot;winId&quot;</span>).<span class="built_in">toString</span>());</span><br><span class="line">    QHBoxLayout *layout = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>(containerWidget);</span><br><span class="line">    layout-&gt;<span class="built_in">setMargin</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> w = QWidget::<span class="built_in">createWindowContainer</span>(window, containerWidget, Qt::Widget))</span><br><span class="line">        layout-&gt;<span class="built_in">addWidget</span>(w);</span><br><span class="line">    containerWidget-&gt;<span class="built_in">setLayout</span>(layout);</span><br><span class="line">    mw-&gt;<span class="built_in">addTabPage</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/resource/images/qd.ico&quot;</span>), title, containerWidget);</span><br><span class="line"></span><br><span class="line">    ::<span class="built_in">MoveWindow</span>(hwnd, mw-&gt;<span class="built_in">stackedWidget</span>()-&gt;<span class="built_in">x</span>(), mw-&gt;<span class="built_in">stackedWidget</span>()-&gt;<span class="built_in">y</span>(), mw-&gt;<span class="built_in">stackedWidget</span>()-&gt;<span class="built_in">width</span>(), mw-&gt;<span class="built_in">stackedWidget</span>()-&gt;<span class="built_in">height</span>(), <span class="literal">true</span>);</span><br><span class="line">    mw-&gt;<span class="built_in">raise</span>();</span><br><span class="line"></span><br><span class="line">    QApplication::<span class="built_in">processEvents</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MainWindow::addTabPage</span><span class="params">(<span class="type">const</span> QIcon &amp;icon, <span class="type">const</span> QString &amp;text, QWidget *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">insertTabPage</span>(ui-&gt;tabBar-&gt;<span class="built_in">count</span>(), icon, text, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MainWindow::insertTabPage</span><span class="params">(<span class="type">int</span> index, <span class="type">const</span> QIcon &amp;icon, <span class="type">const</span> QString &amp;text, QWidget *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;stackedWidget-&gt;<span class="built_in">insertWidget</span>(index, w);</span><br><span class="line">    <span class="type">int</span> ret = ui-&gt;tabBar-&gt;<span class="built_in">insertTab</span>(index, text);</span><br><span class="line">    ui-&gt;tabBar-&gt;<span class="built_in">setTabIcon</span>(index, icon);</span><br><span class="line">    ui-&gt;tabBar-&gt;<span class="built_in">setCurrentIndex</span>(index);</span><br><span class="line">    ui-&gt;stackedWidget-&gt;<span class="built_in">setCurrentIndex</span>(index);</span><br><span class="line"></span><br><span class="line">    m_flh-&gt;<span class="built_in">addExcludeItem</span>(ui-&gt;tabBar-&gt;<span class="built_in">tabButton</span>(ret, QTabBar::ButtonPosition::RightSide));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序 A 发送 Windows 消息给程序 B</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MainWindow::sendWindowMsgToQDMaster</span><span class="params">(<span class="type">const</span> QString &amp;winID, <span class="type">const</span> QByteArray &amp;msgData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">auto</span> strWinId = winID.<span class="built_in">toULongLong</span>(&amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; __FUNCTION__ &lt;&lt; <span class="string">&quot;winid error!&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HWND hwnd = <span class="built_in">reinterpret_cast</span>&lt;HWND&gt;(strWinId);</span><br><span class="line">    <span class="keyword">if</span> (hwnd == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="built_in">GetLastErrorAsString1</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (::<span class="built_in">IsWindow</span>(hwnd)) &#123;</span><br><span class="line">        <span class="comment">// 单独启动一个线程进行数据传递</span></span><br><span class="line">        <span class="function">std::thread <span class="title">thread</span><span class="params">([=]()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="comment">// 使用 COPYDATA 的方式进行数据传递</span></span></span></span><br><span class="line"><span class="params"><span class="function">            COPYDATASTRUCT copyData;</span></span></span><br><span class="line"><span class="params"><span class="function">            copyData.dwData = CUSTOM_TYPE_YDPLATFORM;</span></span></span><br><span class="line"><span class="params"><span class="function">            copyData.lpData = (PVOID)msgData.data();</span></span></span><br><span class="line"><span class="params"><span class="function">            copyData.cbData = (DWORD)msgData.size();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">            HWND sender = (HWND)effectiveWinId();</span></span></span><br><span class="line"><span class="params"><span class="function">            LRESULT result = ::SendMessageW(hwnd, WM_COPYDATA, <span class="keyword">reinterpret_cast</span>&lt;WPARAM&gt;(sender), <span class="keyword">reinterpret_cast</span>&lt;LPARAM&gt;(&amp;copyData));</span></span></span><br><span class="line"><span class="params"><span class="function">            qDebug() &lt;&lt; __FUNCTION__ &lt;&lt; <span class="string">&quot;result: &quot;</span> &lt;&lt; result;</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;)</span></span>;</span><br><span class="line">        <span class="comment">// 分离子线程（数据传递线程）与主线程（UI 线程）</span></span><br><span class="line">        thread.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;findwindow failed!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收 Windows 消息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MainWindow::nativeEvent</span><span class="params">(<span class="type">const</span> QByteArray &amp;eventType, <span class="type">void</span> *message, <span class="type">long</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_UNUSED</span>(eventType);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line">    MSG *msg = <span class="built_in">static_cast</span>&lt;MSG *&gt;(message);</span><br><span class="line">    <span class="keyword">switch</span> (msg-&gt;message) &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COPYDATA: &#123;</span><br><span class="line">        COPYDATASTRUCT *copyData = <span class="built_in">reinterpret_cast</span>&lt;COPYDATASTRUCT*&gt;(msg-&gt;lParam);</span><br><span class="line">        <span class="keyword">if</span> (copyData-&gt;dwData == CUSTOM_TYPE_YDPLATFORM) &#123;</span><br><span class="line"></span><br><span class="line">            QString structMsg = QString::<span class="built_in">fromUtf8</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span> *&gt;(copyData-&gt;lpData), copyData-&gt;cbData);</span><br><span class="line"><span class="comment">//            qDebug() &lt;&lt; &quot;CUSTOM_TYPE_YDPLATFORM receive msg: &quot; &lt;&lt; structMsg;</span></span><br><span class="line">            <span class="built_in">parseCustomMsgCommand</span>(structMsg);</span><br><span class="line"></span><br><span class="line">            *result = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// Q_OS_WIN</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QtExamples </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtExamples </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt问题-namespace</title>
      <link href="/2022/05/19/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-namespace/"/>
      <url>/2022/05/19/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-namespace/</url>
      
        <content type="html"><![CDATA[<h2 id="Namespace-declaration-lacks-Q-NAMESPACE-macro">Namespace declaration lacks Q_NAMESPACE macro</h2><p>Qt 5.15+ 发现这个问题，Qt 5.9 ~ Qt 5.12 都没有这个问题</p><p><a href="https://bugreports.qt.io/browse/QTBUG-68611">https://bugreports.qt.io/browse/QTBUG-68611</a></p><h2 id="解决方案">解决方案</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> E &#123; </span><br><span class="line">  Q_NAMESPACE </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QtProblems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtProblems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tdesktop-2-窗口贴图</title>
      <link href="/2022/04/24/OpenSourceProjects/tdesktop/tdesktop-2-%E7%AA%97%E5%8F%A3%E8%B4%B4%E5%9B%BE/"/>
      <url>/2022/04/24/OpenSourceProjects/tdesktop/tdesktop-2-%E7%AA%97%E5%8F%A3%E8%B4%B4%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="tdesktop-窗口贴图">tdesktop 窗口贴图</h2><p><img src="/assets/images/tdesktop-startwidget-paint.png" alt="tdesktop-startwidget-paint"></p>]]></content>
      
      
      <categories>
          
          <category> tdesktop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> tdesktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt问题-序</title>
      <link href="/2022/04/22/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-%E5%BA%8F/"/>
      <url>/2022/04/22/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Qt问题-序">Qt问题-序</h2><p>记录在使用 Qt 过程中遇到的一些问题及解决办法。</p>]]></content>
      
      
      <categories>
          
          <category> QtProblems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtProblems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt问题-指针变量传参问题</title>
      <link href="/2022/04/22/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/22/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="指针变量传参问题">指针变量传参问题</h2><h2 id="问题1：在操作过程中指针被释放了">问题1：在操作过程中指针被释放了</h2><p><code>QTreeWidgetItem *treeItem = treeWidget-&gt;currentItem();</code> 被别的类保存了一份（比如一个表格渲染任务保存了当前渲染的 treeItem），在渲染完成后还想要对 treeItem 做一些别的操作，此时 treeWidget 由于某些原因或操作被重新加载了（treeItem 被清除了），但是当前渲染的 treeItem 还要操作（比如获取数据 treeItem.data(xx) data(xx) 内部的某些变量地址就会显示 0xffffffffffxxxxxx）就会引起程序崩溃。</p><p><img src="/assets/images/QtProblems-%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98.png" alt="QtProblems-指针变量传参问题"></p><h3 id="指针变量传参问题-测试例子">指针变量传参问题-测试例子</h3><p><img src="/assets/images/QtProblems-%E6%8C%87%E9%92%88%E5%8F%98%E9%87%8F%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98-%E6%B5%8B%E8%AF%95%E4%BE%8B%E5%AD%90.png" alt="QtProblems-指针变量传参问题-测试例子"></p><p>操作顺序：btn1 -&gt; btn2 -&gt; btn1 -&gt; btn3</p><p>当再次按下 btn1 后，重新加载树控件数据，此时 m_item 已经被释放了。<br>btn3 操作里用到了已经被释放的 m_item，从而引起程序崩溃。</p>]]></content>
      
      
      <categories>
          
          <category> QtProblems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtProblems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt实战-获取文本宽高画框</title>
      <link href="/2022/04/21/Qt/QtExamples/Qt%E5%AE%9E%E6%88%98-%E8%8E%B7%E5%8F%96%E6%96%87%E6%9C%AC%E5%AE%BD%E9%AB%98%E7%94%BB%E6%A1%86/"/>
      <url>/2022/04/21/Qt/QtExamples/Qt%E5%AE%9E%E6%88%98-%E8%8E%B7%E5%8F%96%E6%96%87%E6%9C%AC%E5%AE%BD%E9%AB%98%E7%94%BB%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Qt实战-获取文本宽高画框">Qt实战-获取文本宽高画框</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Label::paintEvent</span><span class="params">(QPaintEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">save</span>();</span><br><span class="line">    QFont font = painter.<span class="built_in">font</span>();</span><br><span class="line">    font.<span class="built_in">setPixelSize</span>(<span class="number">24</span>);</span><br><span class="line">    painter.<span class="built_in">setFont</span>(font);</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">drawText</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>, <span class="number">20</span>), <span class="built_in">tr</span>(<span class="string">&quot;HelloHello&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> QRect rectangle = <span class="built_in">QRect</span>(<span class="number">0</span>, <span class="number">30</span>, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">    QRect boundingRect;</span><br><span class="line">    painter.<span class="built_in">drawText</span>(rectangle, <span class="number">0</span>, <span class="built_in">tr</span>(<span class="string">&quot;HelloHello&quot;</span>), &amp;boundingRect);</span><br><span class="line"></span><br><span class="line">    QPen pen = painter.<span class="built_in">pen</span>();</span><br><span class="line">    pen.<span class="built_in">setStyle</span>(Qt::DotLine);</span><br><span class="line">    pen.<span class="built_in">setColor</span>(Qt::red);</span><br><span class="line">    painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(boundingRect.<span class="built_in">adjusted</span>(<span class="number">0</span>, <span class="number">0</span>, -pen.<span class="built_in">width</span>(), -pen.<span class="built_in">width</span>()));</span><br><span class="line"></span><br><span class="line">    pen.<span class="built_in">setStyle</span>(Qt::DashLine);</span><br><span class="line">    pen.<span class="built_in">setColor</span>(Qt::green);</span><br><span class="line">    painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(rectangle.<span class="built_in">adjusted</span>(<span class="number">0</span>, <span class="number">0</span>, -pen.<span class="built_in">width</span>(), -pen.<span class="built_in">width</span>()));</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;boundingRect1:&quot;</span>&lt;&lt; boundingRect;</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">restore</span>();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        painter.<span class="built_in">save</span>();</span><br><span class="line">        font.<span class="built_in">setBold</span>(<span class="literal">true</span>);</span><br><span class="line">        painter.<span class="built_in">setFont</span>(font);</span><br><span class="line"></span><br><span class="line">        painter.<span class="built_in">drawText</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>, <span class="number">120</span>), <span class="built_in">tr</span>(<span class="string">&quot;HelloHello&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> QRect rectangle = <span class="built_in">QRect</span>(<span class="number">0</span>, <span class="number">130</span>, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">        QRect boundingRect;</span><br><span class="line">        painter.<span class="built_in">drawText</span>(rectangle, <span class="number">0</span>, <span class="built_in">tr</span>(<span class="string">&quot;HelloHello&quot;</span>), &amp;boundingRect);</span><br><span class="line"></span><br><span class="line">        QPen pen = painter.<span class="built_in">pen</span>();</span><br><span class="line">        pen.<span class="built_in">setStyle</span>(Qt::DotLine);</span><br><span class="line">        pen.<span class="built_in">setColor</span>(Qt::red);</span><br><span class="line">        painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line">        painter.<span class="built_in">drawRect</span>(boundingRect.<span class="built_in">adjusted</span>(<span class="number">0</span>, <span class="number">0</span>, -pen.<span class="built_in">width</span>(), -pen.<span class="built_in">width</span>()));</span><br><span class="line"></span><br><span class="line">        pen.<span class="built_in">setStyle</span>(Qt::DashLine);</span><br><span class="line">        pen.<span class="built_in">setColor</span>(Qt::green);</span><br><span class="line">        painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line">        painter.<span class="built_in">drawRect</span>(rectangle.<span class="built_in">adjusted</span>(<span class="number">0</span>, <span class="number">0</span>, -pen.<span class="built_in">width</span>(), -pen.<span class="built_in">width</span>()));</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;boundingRect2:&quot;</span>&lt;&lt; boundingRect;</span><br><span class="line">        painter.<span class="built_in">restore</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/images/QtExamples-DrawByTextRect.png" alt="QtExamples-DrawByTextRect"></p>]]></content>
      
      
      <categories>
          
          <category> QtExamples </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtExamples </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt实战-数字提示</title>
      <link href="/2022/04/21/Qt/QtExamples/Qt%E5%AE%9E%E6%88%98-%E6%95%B0%E5%AD%97%E6%8F%90%E7%A4%BA/"/>
      <url>/2022/04/21/Qt/QtExamples/Qt%E5%AE%9E%E6%88%98-%E6%95%B0%E5%AD%97%E6%8F%90%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Qt实战-数字提示">Qt实战-数字提示</h2><h2 id="数字提示-圆角矩形">数字提示(圆角矩形)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Label::paintEvent</span><span class="params">(QPaintEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> qreal radius = <span class="number">10</span>;</span><br><span class="line">    QRectF rect = <span class="built_in">QRect</span>(<span class="number">10</span>, <span class="number">200</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    QPainterPath path;</span><br><span class="line">    path.<span class="built_in">moveTo</span>(rect.<span class="built_in">bottomRight</span>() - <span class="built_in">QPointF</span>(<span class="number">0</span>, radius));</span><br><span class="line">    path.<span class="built_in">lineTo</span>(rect.<span class="built_in">topRight</span>() + <span class="built_in">QPointF</span>(<span class="number">0</span>, radius));</span><br><span class="line">    path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rect.<span class="built_in">topRight</span>() - <span class="built_in">QPointF</span>(radius * <span class="number">2</span>, <span class="number">0</span>)), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius *<span class="number">2</span>)), <span class="number">0</span>, <span class="number">90</span>);</span><br><span class="line">    path.<span class="built_in">lineTo</span>(rect.<span class="built_in">topLeft</span>() + <span class="built_in">QPointF</span>(radius, <span class="number">0</span>));</span><br><span class="line">    path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rect.<span class="built_in">topLeft</span>()), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="number">90</span>, <span class="number">90</span>);</span><br><span class="line">    path.<span class="built_in">lineTo</span>(rect.<span class="built_in">bottomLeft</span>() - <span class="built_in">QPointF</span>(<span class="number">0</span>, radius));</span><br><span class="line">    path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rect.<span class="built_in">bottomLeft</span>() - <span class="built_in">QPointF</span>(<span class="number">0</span>, radius * <span class="number">2</span>)), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="number">180</span>, <span class="number">90</span>);</span><br><span class="line">    path.<span class="built_in">lineTo</span>(rect.<span class="built_in">bottomLeft</span>() + <span class="built_in">QPointF</span>(radius, <span class="number">0</span>));</span><br><span class="line">    path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rect.<span class="built_in">bottomRight</span>() - <span class="built_in">QPointF</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="number">270</span>, <span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">fillPath</span>(path, <span class="built_in">QColor</span>(Qt::red));</span><br><span class="line"></span><br><span class="line">    QPen pen = painter.<span class="built_in">pen</span>();</span><br><span class="line">    pen.<span class="built_in">setColor</span>(Qt::white);</span><br><span class="line">    painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line">    painter.<span class="built_in">drawText</span>(rect, Qt::AlignCenter, QString::<span class="built_in">number</span>(<span class="number">99</span>));</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        painter.<span class="built_in">save</span>();</span><br><span class="line">        <span class="type">const</span> qreal radius = <span class="number">10</span>;</span><br><span class="line">        QRectF rect = <span class="built_in">QRect</span>(<span class="number">50</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        QPainterPath path;</span><br><span class="line"></span><br><span class="line">        path.<span class="built_in">moveTo</span>(rect.<span class="built_in">bottomRight</span>() - <span class="built_in">QPointF</span>(<span class="number">0</span>, radius));</span><br><span class="line">        path.<span class="built_in">lineTo</span>(rect.<span class="built_in">topRight</span>() + <span class="built_in">QPointF</span>(<span class="number">0</span>, radius));</span><br><span class="line">        path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rect.<span class="built_in">topRight</span>() - <span class="built_in">QPointF</span>(radius * <span class="number">2</span>, <span class="number">0</span>)), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius *<span class="number">2</span>)), <span class="number">0</span>, <span class="number">90</span>);</span><br><span class="line">        path.<span class="built_in">lineTo</span>(rect.<span class="built_in">topLeft</span>() + <span class="built_in">QPointF</span>(radius, <span class="number">0</span>));</span><br><span class="line">        path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rect.<span class="built_in">topLeft</span>()), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="number">90</span>, <span class="number">90</span>);</span><br><span class="line">        path.<span class="built_in">lineTo</span>(rect.<span class="built_in">bottomLeft</span>() - <span class="built_in">QPointF</span>(<span class="number">0</span>, radius));</span><br><span class="line">        path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rect.<span class="built_in">bottomLeft</span>() - <span class="built_in">QPointF</span>(<span class="number">0</span>, radius * <span class="number">2</span>)), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="number">180</span>, <span class="number">90</span>);</span><br><span class="line">        path.<span class="built_in">lineTo</span>(rect.<span class="built_in">bottomLeft</span>() + <span class="built_in">QPointF</span>(radius, <span class="number">0</span>));</span><br><span class="line">        path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rect.<span class="built_in">bottomRight</span>() - <span class="built_in">QPointF</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="number">270</span>, <span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">        painter.<span class="built_in">fillPath</span>(path, <span class="built_in">QColor</span>(Qt::red));</span><br><span class="line"></span><br><span class="line">        QPen pen = painter.<span class="built_in">pen</span>();</span><br><span class="line">        pen.<span class="built_in">setColor</span>(Qt::white);</span><br><span class="line">        painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line">        painter.<span class="built_in">drawText</span>(rect, Qt::AlignCenter, QString::<span class="built_in">number</span>(<span class="number">9999999</span>));</span><br><span class="line">        painter.<span class="built_in">restore</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/images/QtExamples-NumTip.png" alt="QtExamples-NumTip"></p><h2 id="文本后面添加数字提示">文本后面添加数字提示</h2><p>需求：树形结构的每一项的文本后面添加数字提示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// paint</span></span><br><span class="line"><span class="type">int</span> leftMargin = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> widthNumTip = <span class="number">18</span>;</span><br><span class="line"><span class="type">int</span> heightNumTip = <span class="number">16</span>;</span><br><span class="line"><span class="type">int</span> xNumTip = r.<span class="built_in">width</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = m_manager ? m_manager-&gt;<span class="built_in">getNumTip</span>(index) : <span class="built_in">getNumTip</span>(index);</span><br><span class="line"><span class="keyword">auto</span> numTipVisible = m_manager ? m_manager-&gt;<span class="built_in">isNumTipVisible</span>(num) : <span class="built_in">isNumTipVisible</span>(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (numTipVisible) &#123;</span><br><span class="line">    <span class="comment">// 根据数字的位数计算圆角矩形的宽度</span></span><br><span class="line">    widthNumTip += <span class="number">3</span> * QString::<span class="built_in">number</span>(num).<span class="built_in">length</span>();</span><br><span class="line">    </span><br><span class="line">    xNumTip = r.<span class="built_in">width</span>() - widthNumTip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QFontMetrics fm = painter-&gt;<span class="built_in">fontMetrics</span>();</span><br><span class="line">flags = Qt::AlignLeft | Qt::AlignVCenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> textWidth = fm.<span class="built_in">width</span>(text);</span><br><span class="line"><span class="keyword">if</span> (textWidth &lt; xNumTip) &#123;</span><br><span class="line">    xNumTip = textWidth;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    text = fm.<span class="built_in">elidedText</span>(text, Qt::ElideRight, numTipVisible ? r.<span class="built_in">width</span>() - widthNumTip : r.<span class="built_in">width</span>(), Qt::TextShowMnemonic);</span><br><span class="line">&#125;</span><br><span class="line">painter-&gt;<span class="built_in">drawText</span>(r, flags, text);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (numTipVisible) &#123;</span><br><span class="line">    <span class="type">const</span> qreal radius = heightNumTip / <span class="number">2</span>;</span><br><span class="line">    QRectF rectNumTip = <span class="built_in">QRect</span>(r.<span class="built_in">left</span>() + xNumTip + leftMargin, newOption.rect.<span class="built_in">top</span>() + (newOption.rect.<span class="built_in">height</span>() - heightNumTip) / <span class="number">2</span>,</span><br><span class="line">                                widthNumTip, heightNumTip);</span><br><span class="line"></span><br><span class="line">    QPainterPath path;</span><br><span class="line">    path.<span class="built_in">moveTo</span>(rectNumTip.<span class="built_in">bottomRight</span>() - <span class="built_in">QPointF</span>(<span class="number">0</span>, radius));</span><br><span class="line">    path.<span class="built_in">lineTo</span>(rectNumTip.<span class="built_in">topRight</span>() + <span class="built_in">QPointF</span>(<span class="number">0</span>, radius));</span><br><span class="line">    path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rectNumTip.<span class="built_in">topRight</span>() - <span class="built_in">QPointF</span>(radius * <span class="number">2</span>, <span class="number">0</span>)), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius *<span class="number">2</span>)), <span class="number">0</span>, <span class="number">90</span>);</span><br><span class="line">    path.<span class="built_in">lineTo</span>(rectNumTip.<span class="built_in">topLeft</span>() + <span class="built_in">QPointF</span>(radius, <span class="number">0</span>));</span><br><span class="line">    path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rectNumTip.<span class="built_in">topLeft</span>()), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="number">90</span>, <span class="number">90</span>);</span><br><span class="line">    path.<span class="built_in">lineTo</span>(rectNumTip.<span class="built_in">bottomLeft</span>() - <span class="built_in">QPointF</span>(<span class="number">0</span>, radius));</span><br><span class="line">    path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rectNumTip.<span class="built_in">bottomLeft</span>() - <span class="built_in">QPointF</span>(<span class="number">0</span>, radius * <span class="number">2</span>)), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="number">180</span>, <span class="number">90</span>);</span><br><span class="line">    path.<span class="built_in">lineTo</span>(rectNumTip.<span class="built_in">bottomLeft</span>() + <span class="built_in">QPointF</span>(radius, <span class="number">0</span>));</span><br><span class="line">    path.<span class="built_in">arcTo</span>(<span class="built_in">QRectF</span>(<span class="built_in">QPointF</span>(rectNumTip.<span class="built_in">bottomRight</span>() - <span class="built_in">QPointF</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="built_in">QSize</span>(radius * <span class="number">2</span>, radius * <span class="number">2</span>)), <span class="number">270</span>, <span class="number">90</span>);</span><br><span class="line">    painter-&gt;<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);</span><br><span class="line">    painter-&gt;<span class="built_in">fillPath</span>(path, <span class="built_in">QColor</span>(Qt::red));</span><br><span class="line"></span><br><span class="line">    painter-&gt;<span class="built_in">save</span>();</span><br><span class="line">    QPen pen = painter-&gt;<span class="built_in">pen</span>();</span><br><span class="line">    pen.<span class="built_in">setWidth</span>(<span class="number">2</span>);</span><br><span class="line">    pen.<span class="built_in">setColor</span>(Qt::white);</span><br><span class="line">    painter-&gt;<span class="built_in">setPen</span>(pen);</span><br><span class="line">    painter-&gt;<span class="built_in">drawText</span>(rectNumTip, Qt::AlignCenter, QString::<span class="built_in">number</span>(num));</span><br><span class="line">    painter-&gt;<span class="built_in">restore</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/images/QtExamples-NumTipNearText.png" alt="QtExamples-NumTipNearText"></p>]]></content>
      
      
      <categories>
          
          <category> QtExamples </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtExamples </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QMenu</title>
      <link href="/2022/04/19/Qt/QMenu/"/>
      <url>/2022/04/19/Qt/QMenu/</url>
      
        <content type="html"><![CDATA[<h2 id="QMenu">QMenu</h2><h2 id="函数介绍">函数介绍</h2><p>1.<strong><code>void setContextMenuPolicy(Qt::ContextMenuPolicy policy)</code></strong></p><p>This enum type defines the various policies a widget can have with respect to showing a context menu.</p><table><thead><tr><th style="text-align:left">Constant</th><th style="text-align:center">Value</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">Qt::NoContextMenu</td><td style="text-align:center">0</td><td style="text-align:left">the widget does not feature a context menu, context menu handling is deferred to the widget’s parent.</td></tr><tr><td style="text-align:left">Qt::PreventContextMenu</td><td style="text-align:center">4</td><td style="text-align:left">the widget does not feature a context menu, and in contrast to NoContextMenu, the handling is not deferred to the widget’s parent. This means that all right mouse button events are guaranteed to be delivered to the widget itself through QWidget::mousePressEvent(), and QWidget::mouseReleaseEvent().</td></tr><tr><td style="text-align:left">Qt::DefaultContextMenu</td><td style="text-align:center">1</td><td style="text-align:left">the widget’s QWidget::contextMenuEvent() handler is called.</td></tr><tr><td style="text-align:left">Qt::ActionsContextMenu</td><td style="text-align:center">2</td><td style="text-align:left">the widget displays its QWidget::actions() as context menu.</td></tr><tr><td style="text-align:left">Qt::CustomContextMenu</td><td style="text-align:center">3</td><td style="text-align:left">the widget emits the QWidget::customContextMenuRequested() signal.</td></tr></tbody></table><h2 id="示例">示例</h2><h3 id="示例1：创建上下文菜单（createContextMenu）">示例1：创建上下文菜单（createContextMenu）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .h</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">createContextMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">contextMenuEvent</span><span class="params">(QContextMenuEvent *e)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QMenu *m_menu = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::createContextMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_menu = <span class="keyword">new</span> <span class="built_in">QMenu</span>(ui-&gt;tableWidget);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> actionAdd = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">QIcon</span>(), <span class="built_in">tr</span>(<span class="string">&quot;增加行&quot;</span>));</span><br><span class="line">    <span class="built_in">connect</span>(actionAdd, &amp;QAction::triggered, <span class="keyword">this</span>, [&amp;](<span class="type">bool</span>)&#123; ui-&gt;tableWidget-&gt;<span class="built_in">insertRow</span>(ui-&gt;tableWidget-&gt;<span class="built_in">rowCount</span>()); &#125;);</span><br><span class="line">    m_menu-&gt;<span class="built_in">addAction</span>(actionAdd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> actionIns = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">QIcon</span>(), <span class="built_in">tr</span>(<span class="string">&quot;插入行&quot;</span>));</span><br><span class="line">    <span class="built_in">connect</span>(actionIns, &amp;QAction::triggered, <span class="keyword">this</span>, [&amp;](<span class="type">bool</span>)&#123;</span><br><span class="line">        <span class="keyword">auto</span> index = ui-&gt;tableWidget-&gt;<span class="built_in">rowCount</span>() == <span class="number">0</span> ? <span class="number">0</span> : ui-&gt;tableWidget-&gt;<span class="built_in">currentRow</span>() + <span class="number">1</span>;</span><br><span class="line">        ui-&gt;tableWidget-&gt;<span class="built_in">insertRow</span>(index);</span><br><span class="line">    &#125;);</span><br><span class="line">    m_menu-&gt;<span class="built_in">addAction</span>(actionIns);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> actionDel = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">QIcon</span>(), <span class="built_in">tr</span>(<span class="string">&quot;删除行&quot;</span>));</span><br><span class="line">    <span class="built_in">connect</span>(actionDel, &amp;QAction::triggered, <span class="keyword">this</span>, [&amp;](<span class="type">bool</span>)&#123; ui-&gt;tableWidget-&gt;<span class="built_in">removeRow</span>(ui-&gt;tableWidget-&gt;<span class="built_in">currentRow</span>()); &#125;);</span><br><span class="line">    m_menu-&gt;<span class="built_in">addAction</span>(actionDel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置小部件的上下文菜单</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;<span class="built_in">setContextMenuPolicy</span>(Qt::ActionsContextMenu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::contextMenuEvent</span><span class="params">(QContextMenuEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_menu-&gt;<span class="built_in">exec</span>(e-&gt;<span class="built_in">globalPos</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改QtCreator界面样式</title>
      <link href="/2022/04/18/Qt/%E4%BF%AE%E6%94%B9QtCreator%E7%95%8C%E9%9D%A2%E6%A0%B7%E5%BC%8F/"/>
      <url>/2022/04/18/Qt/%E4%BF%AE%E6%94%B9QtCreator%E7%95%8C%E9%9D%A2%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="修改-Qt-Creator-界面样式">修改 Qt Creator 界面样式</h2><blockquote><p>注意：是修改 Qt Creator 界面字体样式，并不是编辑器里代码的字体样式。</p></blockquote><h2 id="先上效果图">先上效果图</h2><ul><li><p>黑色主题<br><img src="/assets/images/QtCreator-def-font.png" alt="QtCreator-def-font"><br><img src="/assets/images/QtCreator-modify-font-jet-mono.png" alt="QtCreator-modify-font-jet-mono"><br><img src="/assets/images/QtCreator-modify-font-help-doc-not-good.png" alt="QtCreator-modify-font-help-doc-not-good"></p></li><li><p>白色主题<br><img src="/assets/images/QtCreator-def-font-white.png" alt="QtCreator-def-font-white"><br><img src="/assets/images/QtCreator-modify-font-jet-mono-white.png" alt="QtCreator-modify-font-jet-mono-white"></p></li></ul><blockquote><p>由于是全局的 qss，效果会有所差别，但白色主题还看的过去。</p></blockquote><h2 id="具体操作">具体操作</h2><p>0.安装 <a href="https://github.com/JetBrains/JetBrainsMono">JetBrains Mono</a> 字体（下载解压后打开 <code>font/ttf</code> 文件夹，全选右键安装）</p><p>1.新建一个 <code>.css</code> 文件并填写如下内容，然后保存（例如放在：<code>C:\Qt\qtcreator-custom-style\qtcreator-custom-style.css</code>）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QWidget &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">10pt</span> <span class="string">&quot;JetBrains Mono&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.找到 Qt Creator 的快捷方式，鼠标右键，选择’快捷方式’页，在’目标’编辑框加上 ’ --stylesheet=刚才新建的 css 文件路径’。<br><img src="/assets/images/QtCreator-custom-font.png" alt="QtCreator-custom-font"></p><p>例如：<code>C:\Qt\qtcreator-5.0.2\bin\qtcreator.exe --stylesheet=C:\Qt\qtcreator-custom-style\qtcreator-custom-style.css</code></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QFileInfo</title>
      <link href="/2022/04/15/Qt/QFileInfo/"/>
      <url>/2022/04/15/Qt/QFileInfo/</url>
      
        <content type="html"><![CDATA[<h2 id="QFileInfo">QFileInfo</h2><h2 id="QFileInfo-成员函数介绍">QFileInfo 成员函数介绍</h2><p>1.<strong><code>QString QFileInfo::fileName() const</code></strong><br>Returns the name of the file, excluding the path.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QFileInfo <span class="title">fi</span><span class="params">(<span class="string">&quot;/tmp/archive.tar.gz&quot;</span>)</span></span>;</span><br><span class="line">QString name = fi.<span class="built_in">fileName</span>();         <span class="comment">// name = &quot;archive.tar.gz&quot;</span></span><br></pre></td></tr></table></figure><p>Note that, if this QFileInfo object is given a path ending in a slash, the name of the file is considered empty.</p><p>2.<strong><code>QString QFileInfo::completeBaseName() const</code></strong><br>Returns the complete base name of the file without the path.<br>The complete base name consists of all characters in the file up to (but not including) the last ‘.’ character.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QFileInfo <span class="title">fi</span><span class="params">(<span class="string">&quot;/tmp/archive.tar.gz&quot;</span>)</span></span>;</span><br><span class="line">QString base = fi.<span class="built_in">completeBaseName</span>();  <span class="comment">// base = &quot;archive.tar&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写博客要注意的一些问题</title>
      <link href="/2022/04/15/Hexo-Blog/%E5%86%99%E5%8D%9A%E5%AE%A2%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/15/Hexo-Blog/%E5%86%99%E5%8D%9A%E5%AE%A2%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="标题">标题</h2><p>hexo 新建文章后自动生成的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxxxx</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>其实就是一级标题</p><p><img src="/assets/images/Blog-header.png" alt="Blog-header"></p><h2 id="source-posts-文件夹">source/_posts 文件夹</h2><p>hexo 新建的文章自动生成在 source/_posts 文件夹下</p><p>可以通过手工把同一类文章放到同一个文件夹下（比如：Qt 相关的文章都移动到 Qt 文件夹内），而且通过 hexo 生成、部署后的网页并没有影响</p><h2 id="资源文件">资源文件</h2><p>在文章中引用的图片资源</p><p>可以统一放到资源文件夹 source/images，避免资源重复浪费空间、流量</p><p>在文章中通过 <code>![xxx](/assets/images/xxx.png)</code> 引用即可</p><h2 id="关于文章的一些约定">关于文章的一些约定</h2><ul><li>1.文章分类</li><li>2.文章标签</li><li>3.文章命名</li><li>4.文章配图命名</li></ul><h2 id="文章加载问题">文章加载问题</h2><ul><li><p>1.文章列表加载问题</p><p>网页加载慢，可以禁用文章列表图片</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-cover: /assets/images/logo/QtCreator.png</span><br><span class="line">cover: false</span><br></pre></td></tr></table></figure></li><li><p>2.文章内容加载问题</p><p>文章内容加载慢，可以减少文章配图，或者不用配图（有时候配图可以更加直观易懂）</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QRegExp</title>
      <link href="/2022/04/15/Qt/QRegExp/"/>
      <url>/2022/04/15/Qt/QRegExp/</url>
      
        <content type="html"><![CDATA[<h2 id="QRegExp-成员函数介绍">QRegExp 成员函数介绍</h2><p>1.<strong><code>QString QRegExp::cap(int nth = 0) const</code></strong></p><p>Returns the text captured by the nth subexpression. The entire match has index 0 and the parenthesized subexpressions have indexes starting from 1 (excluding non-capturing parentheses).</p><blockquote><p>返回第 n 个子表达式捕获的文本。整个匹配的索引为 0，带括号的子表达式的索引从 1 开始（不包括非捕获括号）。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QRegExp <span class="title">rxlen</span><span class="params">(<span class="string">&quot;(\\d+)(?:\\s*)(cm|inch)&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> pos = rxlen.<span class="built_in">indexIn</span>(<span class="string">&quot;Length: 189cm&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    QString value = rxlen.<span class="built_in">cap</span>(<span class="number">1</span>); <span class="comment">// &quot;189&quot;</span></span><br><span class="line">    QString unit = rxlen.<span class="built_in">cap</span>(<span class="number">2</span>);  <span class="comment">// &quot;cm&quot;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The order of elements matched by cap() is as follows. The first element, cap(0), is the entire matching string. Each subsequent element corresponds to the next capturing open left parentheses. Thus cap(1) is the text of the first capturing parentheses, cap(2) is the text of the second, and so on.</p><blockquote><p>cap() 匹配的元素顺序如下。第一个元素 cap(0) 是整个匹配字符串。每个后续元素对应于下一个捕获左括号。因此 cap(1) 是第一个捕获括号的文本，cap(2) 是第二个捕获括号的文本，依此类推。</p></blockquote><p>2.<strong><code>bool QRegExp::exactMatch(const QString &amp;str) const</code></strong></p><p>Returns true if str is matched exactly by this regular expression; otherwise returns false. You can determine how much of the string was matched by calling matchedLength().<br>For a given regexp string R, exactMatch(“R”) is the equivalent of indexIn(“^R$”) since exactMatch() effectively encloses the regexp in the start of string and end of string anchors, except that it sets matchedLength() differently.<br>For example, if the regular expression is blue, then exactMatch() returns true only for input blue. For inputs bluebell, blutak and lightblue, exactMatch() returns false and matchedLength() will return 4, 3 and 0 respectively.</p><blockquote><p>如果 str 与此正则表达式完全匹配，则返回 true； 否则返回假。 您可以通过调用matchedLength() 来确定字符串的匹配程度。<br>对于给定的正则表达式字符串 R，exactMatch(“R”) 等效于 indexIn(“^R$”)，因为exactMatch() 有效地将正则表达式包含在字符串的开头和字符串锚点的结尾，除了它设置matchedLength( ) 不同。<br>例如，如果正则表达式为蓝色，则exactMatch() 仅对输入蓝色返回true。 对于输入 bluebell、blutak 和 lightblue，exactMatch() 返回 false，matchedLength() 将分别返回 4、3 和 0。</p></blockquote><p>3.<strong><code>int QRegExp::indexIn(const QString &amp;str, int offset = 0, QRegExp::CaretMode caretMode = CaretAtZero) const</code></strong></p><p>Attempts to find a match in str from position offset (0 by default). If offset is -1, the search starts at the last character; if -2, at the next to last character; etc.<br>Returns the position of the first match, or -1 if there was no match.<br>The caretMode parameter can be used to instruct whether ^ should match at index 0 or at offset.<br>You might prefer to use QString::indexOf(), QString::contains(), or even QStringList::filter(). To replace matches use QString::replace().</p><blockquote><p>尝试从位置偏移量（默认为 0）在 str 中找到匹配项。 如果 offset 为 -1，则从最后一个字符开始搜索； 如果 -2，则在倒数第二个字符处； 等等<br>返回第一个匹配的位置，如果没有匹配则返回 -1。<br>caretMode 参数可用于指示 ^ 是否应在索引 0 处匹配或在偏移处匹配。<br>你可能更喜欢使用 QString::indexOf()、QString::contains()，甚至是 QStringList::filter()。 要替换匹配项，请使用 QString::replace()。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QString str = <span class="string">&quot;offsets: 1.23 .50 71.00 6.00&quot;</span>;</span><br><span class="line"><span class="function">QRegExp <span class="title">rx</span><span class="params">(<span class="string">&quot;\\d*\\.\\d+&quot;</span>)</span></span>;    <span class="comment">// primitive floating point matching</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((pos = rx.<span class="built_in">indexIn</span>(str, pos)) != <span class="number">-1</span>) &#123;</span><br><span class="line">    ++count;</span><br><span class="line">    pos += rx.<span class="built_in">matchedLength</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pos will be 9, 14, 18 and finally 24; count will end up as 4</span></span><br></pre></td></tr></table></figure><p>Although const, this function sets matchedLength(), capturedTexts() and pos().<br>If the QRegExp is a wildcard expression (see setPatternSyntax()) and want to test a string against the whole wildcard expression, use exactMatch() instead of this function.</p><blockquote><p>虽然返回值是 const，但该函数设置了matchedLength()、cappedTexts() 和pos()。<br>如果 QRegExp 是通配符表达式（请参阅 setPatternSyntax()）并且想要针对整个通配符表达式测试字符串，请使用 exactMatch() 而不是此函数。</p></blockquote><h2 id="示例-2">示例</h2><h3 id="示例1：匹配、获取小括号内容">示例1：匹配、获取小括号内容</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">QString text = <span class="string">&quot;qw2(1,2,3,4)223(342)32(1,,3,4)31we&quot;</span></span><br><span class="line"></span><br><span class="line">QRegExp <span class="built_in">re</span>(<span class="string">&quot;\\(.*\\)&quot;</span>); <span class="comment">// 括号及括号内部的任何字符。</span></span><br><span class="line"><span class="keyword">if</span> (re.<span class="built_in">indexIn</span>(text, <span class="number">0</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">auto</span> ret = re.<span class="built_in">cap</span>(<span class="number">0</span>); <span class="comment">// ret = &quot;(1,2,3,4)223(342)32(1,,3,4)&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QRegExp <span class="title">re</span><span class="params">(<span class="string">&quot;\\([^)]*\\)&quot;</span>)</span></span>; <span class="comment">// 从一个开括号到最近的闭括号。</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">QStringList list;</span><br><span class="line"><span class="keyword">while</span> ((pos = exp.<span class="built_in">indexIn</span>(text, pos)) != <span class="number">-1</span>) &#123;</span><br><span class="line">    list &lt;&lt; exp.<span class="built_in">cap</span>(<span class="number">1</span>);</span><br><span class="line">    pos += exp.<span class="built_in">matchedLength</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; list; <span class="comment">// (1,2,3,4), (342), (1,,3,4)</span></span><br><span class="line"></span><br><span class="line"><span class="function">QRegExp <span class="title">rx</span><span class="params">(<span class="string">&quot;(\\d+)&quot;</span>)</span></span>;</span><br><span class="line">QString str = <span class="string">&quot;Offsets: 12 14 99 231 7&quot;</span>;</span><br><span class="line">QStringList list1;</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((pos = rx.<span class="built_in">indexIn</span>(str, pos)) != <span class="number">-1</span>) &#123;</span><br><span class="line">    list1 &lt;&lt; rx.<span class="built_in">cap</span>(<span class="number">1</span>);</span><br><span class="line">    pos += rx.<span class="built_in">matchedLength</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;list1:&quot;</span> &lt;&lt; list1;</span><br><span class="line"><span class="comment">// list1: [&quot;12&quot;, &quot;14&quot;, &quot;99&quot;, &quot;231&quot;, &quot;7&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="示例2：匹配内容">示例2：匹配内容</h3><blockquote><p>全内容匹配，使用 exactMatch()</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QString text = <span class="string">&quot;(1,2,3,4)&quot;</span>;</span><br><span class="line">QString text1 = <span class="string">&quot;11(1,2,3,4)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">QRegExp <span class="title">exp</span><span class="params">(<span class="string">&quot;\\(.*\\)&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; exp.<span class="built_in">exactMatch</span>(text); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt; exp.<span class="built_in">exactMatch</span>(text1); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 给图片添加水印</title>
      <link href="/2022/04/08/Python/Python-Add-Watermarking/"/>
      <url>/2022/04/08/Python/Python-Add-Watermarking/</url>
      
        <content type="html"><![CDATA[<h2 id="示例-3">示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_text</span>(<span class="params">img_path, text=<span class="string">&#x27;svinda.github.io&#x27;</span>, show_result_image=<span class="literal">False</span></span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line">    font = ImageFont.truetype(<span class="string">&#x27;C:/windows/fonts/Arial.ttf&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># color = (255, 222, 111)</span></span><br><span class="line">    width, height = img.size</span><br><span class="line">    draw.text((width - <span class="number">150</span>, height - <span class="number">55</span>), text, (<span class="number">14</span>, <span class="number">222</span>, <span class="number">111</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加透明度</span></span><br><span class="line">    draw.text((width - <span class="number">150</span>, height - <span class="number">35</span>), text, (<span class="number">14</span>, <span class="number">222</span>, <span class="number">111</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加字体</span></span><br><span class="line">    draw.text((width - <span class="number">150</span>, height - <span class="number">75</span>), text, (<span class="number">14</span>, <span class="number">222</span>, <span class="number">111</span>), font=font)</span><br><span class="line">    ImageDraw.Draw(img)</span><br><span class="line"></span><br><span class="line">    (path, suffix) = os.path.splitext(img_path)</span><br><span class="line">    <span class="built_in">print</span>(path, suffix)</span><br><span class="line">    img.save(path + <span class="string">&#x27;_watermark.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> show_result_image:</span><br><span class="line">        <span class="comment">## （阻塞）打开添加水印后的图片</span></span><br><span class="line">        img.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多张图片添加同一水印</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_text_all</span>(<span class="params">img_paths=[], text=<span class="string">&#x27;svinda.github.io&#x27;</span>, show_result_image=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> img_path <span class="keyword">in</span> img_paths:</span><br><span class="line">        add_text(img_path, text, show_result_image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    image_path = <span class="string">r&quot;images\hexo-文章插入图片.png&quot;</span></span><br><span class="line">    add_text(image_path, <span class="string">&#x27;svinda.github.io&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add_text_all([<span class="string">r&quot;images\hexo-文章插入图片.png&quot;</span>, <span class="string">r&quot;images\hexo-文章插入图片 - 副本.png&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果图<br><img src="/assets/images/hexo-%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87_watermark.png" alt="插入图片_watermark"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-4-main() 函数分析</title>
      <link href="/2022/04/06/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-4-main()%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/"/>
      <url>/2022/04/06/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-4-main()%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0-程序-main-函数执行流程图">0.程序 <code>main()</code> 函数执行流程图</h2><p><img src="/assets/images/QtCreator-%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="QtCreator-程序入口流程图.png"></p><h2 id="1-Restarter-restarter-argc-argv">1.<code>Restarter restarter(argc, argv)</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Restarter <span class="title">restarter</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> restarter.<span class="built_in">restartOrExit</span>(app.<span class="built_in">exec</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序重启器，用于某些配置修改后，需要重启程序才能够使配置生效。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Restarter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Restarter</span>(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Q_UNUSED</span>(argc)</span><br><span class="line">        m_executable = QString::<span class="built_in">fromLocal8Bit</span>(argv[<span class="number">0</span>]);</span><br><span class="line">        m_workingPath = QDir::<span class="built_in">currentPath</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setArguments</span><span class="params">(<span class="type">const</span> QStringList &amp;args)</span> </span>&#123; m_args = args; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">executable</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_executable; &#125;</span><br><span class="line">    <span class="function">QStringList <span class="title">arguments</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_args; &#125;</span><br><span class="line">    <span class="function">QString <span class="title">workingPath</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_workingPath; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">restartOrExit</span><span class="params">(<span class="type">int</span> exitCode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 根据 &quot;restart&quot; 属性判断是需要重启程序</span></span><br><span class="line">        <span class="keyword">return</span> qApp-&gt;<span class="built_in">property</span>(<span class="string">&quot;restart&quot;</span>).<span class="built_in">toBool</span>() ? <span class="built_in">restart</span>(exitCode) : exitCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">restart</span><span class="params">(<span class="type">int</span> exitCode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 启动进程</span></span><br><span class="line">        QProcess::<span class="built_in">startDetached</span>(m_executable, m_args, m_workingPath);</span><br><span class="line">        <span class="keyword">return</span> exitCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QString m_executable;  <span class="comment">// 可执行程序名称</span></span><br><span class="line">    QStringList m_args;    <span class="comment">// 可执行程序的命令参数</span></span><br><span class="line">    QString m_workingPath; <span class="comment">// 可执行程序所在的工作目录</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-SharedTools-QtSingleApplication-app">2.<code>SharedTools::QtSingleApplication app()</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function">SharedTools::QtSingleApplication <span class="title">app</span><span class="params">((QLatin1String(Core::Constants::IDE_DISPLAY_NAME)),</span></span></span><br><span class="line"><span class="params"><span class="function">                                         numberofArguments,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         options.appArguments.data())</span></span>;</span><br><span class="line">......</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> QT_VERSION &lt; QT_VERSION_CHECK(6, 0, 0)</span></span><br><span class="line">    app.<span class="built_in">setAttribute</span>(Qt::AA_UseHighDpiPixmaps);</span><br><span class="line">    app.<span class="built_in">setAttribute</span>(Qt::AA_DisableWindowContextHelpButton);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">......</span><br><span class="line">    QTranslator translator;</span><br><span class="line">    QTranslator qtTranslator;</span><br><span class="line">......</span><br><span class="line">    app.<span class="built_in">installTranslator</span>(&amp;translator);</span><br><span class="line">    app.<span class="built_in">installTranslator</span>(&amp;qtTranslator);</span><br><span class="line">    app.<span class="built_in">setProperty</span>(<span class="string">&quot;qtc_locale&quot;</span>, locale);</span><br><span class="line">......</span><br><span class="line">    app.<span class="built_in">setDesktopFileName</span>(<span class="string">&quot;org.qt-project.qtcreator.desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> isBlock = foundAppOptions.<span class="built_in">contains</span>(<span class="built_in">QLatin1String</span>(BLOCK_OPTION));</span><br><span class="line">    <span class="keyword">if</span> (app.<span class="built_in">isRunning</span>() &amp;&amp; (pid != <span class="number">-1</span> || isBlock</span><br><span class="line">                            || foundAppOptions.<span class="built_in">contains</span>(<span class="built_in">QLatin1String</span>(CLIENT_OPTION)))) &#123;</span><br><span class="line">        app.<span class="built_in">setBlock</span>(isBlock);</span><br><span class="line">        <span class="keyword">if</span> (app.<span class="built_in">sendMessage</span>(PluginManager::<span class="built_in">serializedArguments</span>(), <span class="number">5000</span> <span class="comment">/*timeout*/</span>, pid))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Message could not be send, maybe it was in the process of quitting</span></span><br><span class="line">        <span class="keyword">if</span> (app.<span class="built_in">isRunning</span>(pid)) &#123;</span><br><span class="line">            <span class="comment">// Nah app is still running, ask the user</span></span><br><span class="line">            <span class="type">int</span> button = <span class="built_in">askMsgSendFailed</span>();</span><br><span class="line">            <span class="keyword">while</span> (button == QMessageBox::Retry) &#123;</span><br><span class="line">                <span class="keyword">if</span> (app.<span class="built_in">sendMessage</span>(PluginManager::<span class="built_in">serializedArguments</span>(), <span class="number">5000</span> <span class="comment">/*timeout*/</span>, pid))</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (!app.<span class="built_in">isRunning</span>(pid)) <span class="comment">// App quit while we were trying so start a new creator</span></span><br><span class="line">                    button = QMessageBox::Yes;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    button = <span class="built_in">askMsgSendFailed</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (button == QMessageBox::No)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set up remote arguments.</span></span><br><span class="line">    QObject::<span class="built_in">connect</span>(&amp;app, &amp;SharedTools::QtSingleApplication::messageReceived,</span><br><span class="line">                     &amp;pluginManager, &amp;PluginManager::remoteArguments);</span><br><span class="line"></span><br><span class="line">    QObject::<span class="built_in">connect</span>(&amp;app, <span class="built_in">SIGNAL</span>(<span class="built_in">fileOpenRequest</span>(QString)), coreplugin-&gt;<span class="built_in">plugin</span>(),</span><br><span class="line">                     <span class="built_in">SLOT</span>(<span class="built_in">fileOpenRequest</span>(QString)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shutdown plugin manager on the exit</span></span><br><span class="line">    QObject::<span class="built_in">connect</span>(&amp;app, &amp;QCoreApplication::aboutToQuit, &amp;pluginManager, &amp;PluginManager::shutdown);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> restarter.<span class="built_in">restartOrExit</span>(app.<span class="built_in">exec</span>());</span><br></pre></td></tr></table></figure><p>QtSingleApplication 提供了每个用户只能启动一次的应用程序的功能。<br>Qt 提供了解决方案组件项目 qtproject/qt-solutions <a href="https://github.com/qtproject/qt-solutions">https://github.com/qtproject/qt-solutions</a><br>Qt Creator 里的 QtSingleApplication 和 qt-solutions 有些不一样</p><p>qtproject/qt-solutions 提供的解决方案项目在另外的篇章展开分析：<a href="../Qt_Document/23.QtSingleApplication.md">QtSingleApplication</a></p><h2 id="3-程序工作环境配置">3.程序工作环境配置</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">QCoreApplication::<span class="built_in">setApplicationName</span>(Core::Constants::IDE_CASED_ID);</span><br><span class="line">QCoreApplication::<span class="built_in">setApplicationVersion</span>(<span class="built_in">QLatin1String</span>(Core::Constants::IDE_VERSION_LONG));</span><br><span class="line">QCoreApplication::<span class="built_in">setOrganizationName</span>(<span class="built_in">QLatin1String</span>(Core::Constants::IDE_SETTINGSVARIANT_STR));</span><br><span class="line">QGuiApplication::<span class="built_in">setApplicationDisplayName</span>(Core::Constants::IDE_DISPLAY_NAME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> cleanup = <span class="built_in">qScopeGuard</span>([] &#123; Utils::Singleton::<span class="built_in">deleteAll</span>(); &#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> QStringList pluginArguments = app.<span class="built_in">arguments</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Initialize global settings and resetup install settings with QApplication::applicationDirPath */</span></span><br><span class="line"><span class="built_in">setupInstallSettings</span>(options.installSettingsPath);</span><br><span class="line">Utils::QtcSettings *settings = <span class="built_in">createUserSettings</span>();</span><br><span class="line"><span class="comment">// static Utils::QtcSettings *createUserSettings()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return new Utils::QtcSettings(QSettings::IniFormat,</span></span><br><span class="line"><span class="comment">//                                   QSettings::UserScope,</span></span><br><span class="line"><span class="comment">//                                   QLatin1String(Core::Constants::IDE_SETTINGSVARIANT_STR),</span></span><br><span class="line"><span class="comment">//                                   QLatin1String(Core::Constants::IDE_CASED_ID));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">Utils::QtcSettings *globalSettings</span><br><span class="line">    = <span class="keyword">new</span> Utils::<span class="built_in">QtcSettings</span>(QSettings::IniFormat,</span><br><span class="line">                             QSettings::SystemScope,</span><br><span class="line">                             <span class="built_in">QLatin1String</span>(Core::Constants::IDE_SETTINGSVARIANT_STR),</span><br><span class="line">                             <span class="built_in">QLatin1String</span>(Core::Constants::IDE_CASED_ID));</span><br><span class="line">Utils::TerminalCommand::<span class="built_in">setSettings</span>(settings);</span><br><span class="line"><span class="built_in">loadFonts</span>();</span><br><span class="line"><span class="comment">// void loadFonts()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     const QDir dir(resourcePath() + &quot;/fonts/&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     const QFileInfoList fonts = dir.entryInfoList(QStringList(&quot;*.ttf&quot;), QDir::Files);</span></span><br><span class="line"><span class="comment">//     for (const QFileInfo &amp;fileInfo : fonts)</span></span><br><span class="line"><span class="comment">//         QFontDatabase::addApplicationFont(fileInfo.absoluteFilePath());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>主要理解这两个代表什么就行了<br><code>QSettings::UserScope</code><br><code>QSettings::SystemScope</code></p><p>TODO：QSettings 需要另外的篇章介绍。</p><h2 id="4-PluginManager-pluginManager">4.<code>PluginManager pluginManager</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PluginManager pluginManager;</span><br><span class="line">PluginManager::<span class="built_in">setPluginIID</span>(<span class="built_in">QLatin1String</span>(<span class="string">&quot;org.qt-project.Qt.QtCreatorPlugin&quot;</span>));</span><br><span class="line">PluginManager::<span class="built_in">setGlobalSettings</span>(globalSettings);</span><br><span class="line">PluginManager::<span class="built_in">setSettings</span>(settings);</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 读取所有路径下的插件属性信息</span></span><br><span class="line">PluginManager::<span class="built_in">setPluginPaths</span>(pluginPaths);</span><br><span class="line">...</span><br><span class="line">PluginManager::<span class="built_in">checkForProblematicPlugins</span>();</span><br><span class="line"><span class="comment">// 加载插件</span></span><br><span class="line">PluginManager::<span class="built_in">loadPlugins</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> QtCreator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-3-程序入口</title>
      <link href="/2022/04/06/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-3-%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3/"/>
      <url>/2022/04/06/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-3-%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="分析程序入口">分析程序入口</h2><p>在键盘上按下 F10 键，Qt Creator 便会启动调试并且自动定位到 <code>main()</code> 函数处，在不知道程序入口的情况下，这种方法是最好用的。<br>如果是知道程序入口，那么可以在入口处打上断点，然后启动调试，也会定位到断点处。</p>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> QtCreator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-2-目录分析</title>
      <link href="/2022/04/05/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2-%E7%9B%AE%E5%BD%95%E5%88%86%E6%9E%90/"/>
      <url>/2022/04/05/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2-%E7%9B%AE%E5%BD%95%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="目录树">目录树</h2><p>qt-creator-opensource-src-7.0.0 目录树</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">qt-creator-opensource-src-7.0.0:</span><br><span class="line">├─bin</span><br><span class="line">├─cmake</span><br><span class="line">├─coin</span><br><span class="line">├─dist</span><br><span class="line">├─doc</span><br><span class="line">├─qbs</span><br><span class="line">├─scripts</span><br><span class="line">├─share</span><br><span class="line">├─src</span><br><span class="line">└─test</span><br></pre></td></tr></table></figure><!-- bin: 生成Linux平台shell脚本。dist: 安装文件配置信息和版本更新记录。doc: 生成doxygen文档的配置文件。lib:Qt组件相关的QML文件qbs:QBS 配置文件。QBS，即 Qt Build Suite，是一种跨平台的编译工具，目的是将高层的项目描述（使用类似QML的语言）转换成底层的编译描述（供 make 等工具使用的信息）。它可以简化多平台的编译过程。QBS与qmake类似，区别在于前者适用于任意项目，而后者一般仅供Qt项目使用。在阅读代码时将关注 qmake，不会深入研究QBS的使用。scripts: QtCreator使用的perl以及python等脚本。share: 源代码中所需要的一些非代码共享文件，例如代码模板等。src: QtCreator源代码文件。tests: QtCreator测试代码。HACKING: QtCreator编码规范。LICENSE.LGPL: LGPL协议。qtcreator.pri: QtCreator项目需要使用的通用配置，一般会被include到大部分 pro文件。qtcreator.pro: QtCreator的qmake项目文件。qtcreator.qbs:  Qt Creator 的 QBS 项目文件。README: 有关如何编译QtCreator等相关事宜的一些说明。.gitignore: git忽略文件配置。.gitmodules:git 子模块配置 --><h2 id="目录说明">目录说明</h2><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>生成Linux平台shell脚本。</td></tr><tr><td>cmake</td><td>cmake扩展文件</td></tr><tr><td>coin</td><td>用于Qt Creator 持续集成部署的一些yaml脚本</td></tr><tr><td>dist</td><td>安装文件配置信息和版本更新记录。</td></tr><tr><td>doc</td><td>生成doxygen文档的配置文件。</td></tr><tr><td>qbs</td><td>.qbs配置文件。qbs(Qt Build Suite)是一种跨平台的编译工具。</td></tr><tr><td>scripts</td><td>QtCreator使用的perl以及python等脚本。</td></tr><tr><td>share</td><td>源代码中所需要的一些非代码共享文件，例如代码模板等。</td></tr><tr><td>src</td><td>QtCreator源代码文件。</td></tr><tr><td>test</td><td>QtCreator测试代码。</td></tr></tbody></table><h2 id="代码文件分析">代码文件分析</h2><p>使用 <a href="https://github.com/AlDanial/cloc">cloc</a> 对 qt-creator-opensource-src-7.0.0\src 进行统计分析</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">$&gt;cloc-1.92.exe D:\QtSource\qt-creator-opensource-src-7.0.0\src</span><br><span class="line">   13515 text files.</span><br><span class="line">   12511 unique files.</span><br><span class="line">    2485 files ignored.</span><br><span class="line"></span><br><span class="line">github.com/AlDanial/cloc v 1.92  T=19.60 s (638.2 files/s, 133709.7 lines/s)</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">Language                             files          blank        comment           code</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">C++                                   4125         183463         165252        1004980</span><br><span class="line">C/C++ Header                          4464          84265         143565         283244</span><br><span class="line">C                                      108          16768          77301         182758</span><br><span class="line">JavaScript                            1337          22995          67899         116613</span><br><span class="line">XML                                     73            976           1177          75675</span><br><span class="line">QML                                   1391           5956           8626          50085</span><br><span class="line">Qt                                     203             24              0          37726</span><br><span class="line">SVG                                     15             10             14          19945</span><br><span class="line">ANTLR Grammar                            4           1670            388          10959</span><br><span class="line">CMake                                  214            730            248           9788</span><br><span class="line">Python                                  35           1403            995           7506</span><br><span class="line">YAML                                    20             71            486           6538</span><br><span class="line">diff                                    13            195           2969           4419</span><br><span class="line">Objective-C++                           26            347            536           1904</span><br><span class="line">yacc                                     5            297             54           1847</span><br><span class="line">Markdown                                57            529              0           1828</span><br><span class="line">Assembly                                59            101            661           1683</span><br><span class="line">Qt Project                             138            408             23           1652</span><br><span class="line">Bourne Shell                            33            279           1076           1180</span><br><span class="line">JSON                                    40             35              0           1113</span><br><span class="line">CSS                                      9            185             28            909</span><br><span class="line">Java                                    31            135            217            693</span><br><span class="line">Perl                                     6            110            134            647</span><br><span class="line">Dockerfile                               8            103            136            562</span><br><span class="line">XSD                                      1             24            307            370</span><br><span class="line">Objective-C                             12             96            289            357</span><br><span class="line">ProGuard                                 5             64             30            242</span><br><span class="line">Qt Linguist                              5              0              0            193</span><br><span class="line">GLSL                                    12             52            293            175</span><br><span class="line">Bourne Again Shell                       1             37              1            155</span><br><span class="line">lex                                      8             48             76            148</span><br><span class="line">TypeScript                               8             20              1            125</span><br><span class="line">Protocol Buffers                         9             30             28             93</span><br><span class="line">WiX <span class="built_in">source</span>                               4              9              0             77</span><br><span class="line">Prolog                                   4             13             98             76</span><br><span class="line">Windows Resource File                    5             10              1             62</span><br><span class="line">DOS Batch                                6             24             49             54</span><br><span class="line">C<span class="comment">#                                       4              1              0             41</span></span><br><span class="line">Windows Module Definition                2              0              0             32</span><br><span class="line">sed                                      1              2              1             22</span><br><span class="line">PowerShell                               1              3              0             20</span><br><span class="line">HTML                                     1              0              0             18</span><br><span class="line">Visual Basic .NET                        1              0              0              7</span><br><span class="line">Meson                                    1              1              0              6</span><br><span class="line">MATLAB                                   2              0              0              5</span><br><span class="line">IDL                                      1              1              0              2</span><br><span class="line">F<span class="comment">#                                       1              0              0              1</span></span><br><span class="line">INI                                      1              0              0              1</span><br><span class="line">WiX string localization                  1              0              0              1</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">SUM:                                 12511         321490         472959        1826537</span><br><span class="line">---------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="构建项目配置文件">构建项目配置文件</h2><p>就我所用到用于 Qt 工程构建的配置文件方式有三种：<code>xx.qbs</code> <code>xx.pro</code> <code>CMakeLists.txt</code></p><p>但是这里 Qt Creator 7.0.0 只提供了 qbs 和 CMakeLists.txt 这两种构建方式</p>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> QtCreator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-1-环境配置</title>
      <link href="/2022/04/05/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/04/05/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Qt-Creator-简介">Qt Creator 简介</h2><p><strong>Qt Creator 在 GitHub 上的仓库</strong>：<a href="https://github.com/qt-creator/qt-creator">https://github.com/qt-creator/qt-creator</a></p><p>目前需要关注的地方如下原文：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Qt Creator</span><br><span class="line"></span><br><span class="line">Qt Creator is a cross-platform, integrated development environment (IDE)</span><br><span class="line">for application developers to create applications for multiple desktop, embedded,</span><br><span class="line">and mobile device platforms.</span><br><span class="line"></span><br><span class="line">The Qt Creator Manual is available at:</span><br><span class="line"></span><br><span class="line">https://doc.qt.io/qtcreator/index.html</span><br><span class="line"></span><br><span class="line">For an overview of the Qt Creator IDE, see:</span><br><span class="line"></span><br><span class="line">https://doc.qt.io/qtcreator/creator-overview.html</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Compiling Qt Creator</span><br><span class="line"></span><br><span class="line">Prerequisites:</span><br><span class="line"></span><br><span class="line">    Qt 5.15.2 or later</span><br><span class="line">    Qt WebEngine module for QtWebEngine based help viewer</span><br><span class="line">    On Windows:</span><br><span class="line">        MinGW with GCC 7 or Visual Studio 2017 or later</span><br><span class="line">        Python 3.5 or later (optional, needed for the python enabled debug helper)</span><br><span class="line">        Debugging Tools for Windows (optional, for MSVC debugging support with CDB)</span><br><span class="line">    On Mac OS X: latest Xcode</span><br><span class="line">    On Linux: GCC 7 or later</span><br><span class="line">    LLVM/Clang 10 or later (optional, LLVM/Clang 13 is recommended. See instructions on how to get LLVM.</span><br><span class="line">    The ClangFormat, ClangPchManager and ClangRefactoring use the LLVM C++ API.</span><br><span class="line">    Since the LLVM C++ API provides no compatibility guarantee, </span><br><span class="line">    if later versions don&#x27;t compile we don&#x27;t support that version.)</span><br><span class="line">    CMake</span><br><span class="line">    Ninja (recommended)</span><br><span class="line"></span><br><span class="line">The used toolchain has to be compatible with the one Qt was compiled with.</span><br></pre></td></tr></table></figure><p>Qt Creator 是一个跨平台的集成开发环境（IDE），供应用程序开发人员为多个桌面、嵌入式和移动设备平台创建应用程序。</p><p>Qt Creator 手册可从以下网站获得：<br><a href="https://doc.qt.io/qtcreator/index.html">https://doc.qt.io/qtcreator/index.html</a></p><p>有关Qt Creator IDE的概述，请参阅：<br><a href="https://doc.qt.io/qtcreator/creator-overview.html">https://doc.qt.io/qtcreator/creator-overview.html</a></p><p>……</p><p>编译 Qt Creator</p><p>前提条件：</p><ul><li>Qt 5.15.2 或更高版本</li><li>基于 QtWebEngine 的帮助查看器的 Qt WebEngine 模块</li><li>在 Windows 上：<ul><li>MinGW 与 GCC 7 或 Visual Studio 2017 或更高版本</li><li>Python 3.5 或更高版本（可选，支持 Python 的调试助手需要）</li><li>Windows 调试工具（可选，用于 CDB 的 MSVC 调试支持）</li></ul></li><li>在 Mac OS X 上：最新的 Xcode</li><li>在 Linux上：GCC 7 或更高版本</li><li>LLVM/CLAN 10 或更高版本（可选的，LLVM/CLAN 13）。参见如何获得 LLVM 的说明。ClangFormat，CLANPCHCHEMANDION 和 CLAGReF 重构使用 LLVM C++ API。由于 LLVM C++ API 没有提供兼容性保证，如果以后的版本不编译，我们不支持该版本。</li><li>CMake</li><li>Ninja（推荐）</li></ul><p>使用的工具链必须与编译Qt时使用的工具链兼容。</p><h2 id="环境说明">环境说明</h2><ul><li>Windows 10</li><li>Qt 5.15.2 MSVC 2019 64 bit</li><li>Qt Creator 7.0.0</li><li>磁盘空间至少要有 15G 空间</li></ul><h2 id="Qt-5-15-2-安装">Qt 5.15.2 安装</h2><p>自 Qt 5.15 开始，Qt 公司不再提供开源脱机安装程序，相关文章：<a href="https://www.qt.io/blog/qt-offering-changes-2020">https://www.qt.io/blog/qt-offering-changes-2020</a></p><p>可以通过 Qt 提供的在线安装器<a href="https://download.qt.io/official_releases/online_installers/">qt-unified-windows-x86-online.exe</a>来安装，但是需要注册 Qt 账户。</p><p><img src="/assets/images/QtCreator-Qt%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85%E5%99%A8.png" alt="QtCreator-Qt在线安装器"></p><p>双击启动 qt-unified-windows-x86-online.exe 注册账户后(已有账户跳过)，登录，勾选一些必勾选项后，把 Qt 5.15.2 打上勾，确定后便开始下载安装了，这个过程消耗的时间比较长。</p><h2 id="获取并编译-Qt-Creator-7-0-0-源码">获取并编译 Qt Creator 7.0.0 源码</h2><p><a href="https://download.qt.io/official_releases/qtcreator/7.0/7.0.0/">Qt Creator 7.0.0</a> <code>https://download.qt.io/official_releases/qtcreator/7.0/7.0.0/</code><br><img src="/assets/images/QtCreator-%E8%8E%B7%E5%8F%96%E6%BA%90%E7%A0%81.png" alt="QtCreator-获取源码"></p><p>这里提供了源码的三种方式压缩包，随便下载一个即可。</p><ol><li>解压到一个你认为比较赏心悦目的目录下</li><li>启动安装好的 Qt Creator (安装 Qt 5.15.2)</li><li>打开解压后 qt-creator-opensource-src-7.0.0 目录里的 qtcreator.qbs 勾选配置 Qt 5.15.2 MSVC 2019 64 bit<br>或者打开 CMakeLists.txt 勾选配置 Qt 6.2.1 MinGW 64 bit</li><li>点击编译即可</li></ol><p><img src="/assets/images/QtCreator-qbs-build.png" alt="QtCreator-qbs-build"><br><img src="/assets/images/QtCreator-cmake-build.png" alt="QtCreator-cmake-build"></p><p>编译完成后，运行。</p><p><img src="/assets/images/QtCreator-%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90.png" alt="QtCreator-编译完成"></p>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> QtCreator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 源码分析-0-序</title>
      <link href="/2022/04/05/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-0-%E5%BA%8F/"/>
      <url>/2022/04/05/OpenSourceProjects/QtCreator/QtCreator%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-0-%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>有打算分析 Qt Creator 源码的想法已经很久了，偶尔也会写一点，但是断断续续……</p><p>在做项目期间也有使用 Qt Creator 源码里的插件系统。</p><p>本着学习和提升的目的，开始写 Qt Creator 源码分析文章。</p><h2 id="目录">目录</h2><!-- markdown 的语法在 Hexo 中不兼容[Qt Creator 源码分析-1-环境配置](../QtCreator源码分析-1-环境配置)[Qt Creator 源码分析-2-目录分析](../QtCreator源码分析-2-目录分析)[Qt Creator 源码分析-3-程序入口](../QtCreator源码分析-3-程序入口)[Qt Creator 源码分析-4-main() 函数分析](../QtCreator源码分析-4-main()函数分析)--><!-- <a href="#">Post not found: 文章文件名（不要后缀） 文章标题（可选）</a> --><ul><li><a href="#">Post not found: QtCreator源码分析-0-序 Qt Creator 源码分析-0-序</a></li><li><a href="#">Post not found: QtCreator源码分析-1-环境配置 Qt Creator 源码分析-1-环境配置</a></li><li><a href="#">Post not found: QtCreator源码分析-2-目录分析 Qt Creator 源码分析-2-目录分析</a></li><li><a href="#">Post not found: QtCreator源码分析-3-程序入口 Qt Creator 源码分析-3-程序入口</a></li><li><a href="#">Post not found: QtCreator源码分析-4-main()函数分析 Qt Creator 源码分析-4-main() 函数分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Qt Creator 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> QtCreator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt嵌入Word</title>
      <link href="/2022/03/24/Qt/Qt%E5%B5%8C%E5%85%A5Word/"/>
      <url>/2022/03/24/Qt/Qt%E5%B5%8C%E5%85%A5Word/</url>
      
        <content type="html"><![CDATA[<h2 id="Qt-调用-QAxWidget-dsoframer-ocx-嵌入-office">Qt 调用 QAxWidget(dsoframer.ocx) 嵌入 office</h2><h2 id="效果">效果</h2><p><img src="/assets/images/Qt-Office-Demo.png" alt="Qt-Office-Demo"></p><h2 id="注册-dsoframer-ocx">注册 dsoframer.ocx</h2><p>前提：需要安装有 Microsoft Word 或者 WPS</p><p>把 dsoframer.ocx 拷贝到系统目录下，并以管理员身份注册：</p><p>32位：</p><blockquote><p>copy dsoframer.ocx c:\windows\system32\dsoframer.ocx<br>regsvr32.exe c:\windows\system32\dsoframer.ocx</p></blockquote><p>64位：</p><blockquote><p>copy dsoframer.ocx c:\windows\SysWOW64\dsoframer.ocx<br>regsvr32.exe c:\windows\SysWOW64\dsoframer.ocx</p></blockquote><p><img src="/assets/images/dsoframer.ocx-reg.png" alt="reg"></p><p><img src="/assets/images/DSOFramerControl-CLSID.png" alt="DSO-CLSID"></p><h2 id="在-QtCreator-中编写测试用例">在 QtCreator 中编写测试用例</h2><p><img src="/assets/images/DSO%20Framer%20Control%20Object.png" alt="DSO Framer Control Object"></p><p>主要代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ui-&gt;axWidget-&gt;<span class="built_in">isNull</span>())</span><br><span class="line">    ui-&gt;axWidget-&gt;<span class="built_in">setControl</span>(<span class="string">&quot;&#123;FBCCBFE5-66FA-4ee3-9AF1-E02A59549AB9&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">ui-&gt;axWidget-&gt;<span class="built_in">setProperty</span>(<span class="string">&quot;Visible&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//    ui-&gt;axWidget-&gt;dynamicCall(&quot;Open(string)&quot;, filePath);</span></span><br><span class="line"></span><br><span class="line">ui-&gt;axWidget-&gt;<span class="built_in">dynamicCall</span>(<span class="string">&quot;createNew(string)&quot;</span>, <span class="string">&quot;Word.Document&quot;</span>); <span class="comment">// 创建空白文档</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    ui-&gt;axWidget-&gt;dynamicCall(&quot;SetCaption(string)&quot;, &quot;ocx test&quot;); // 设置标题</span></span><br><span class="line">ui-&gt;axWidget-&gt;<span class="built_in">dynamicCall</span>(<span class="string">&quot;SetTitlebar(bool)&quot;</span>, <span class="literal">false</span>); <span class="comment">// 隐藏标题栏</span></span><br><span class="line">ui-&gt;axWidget-&gt;<span class="built_in">dynamicCall</span>(<span class="string">&quot;SetMenuAccelerators(bool)&quot;</span>, <span class="literal">false</span>); <span class="comment">// 菜单快捷键</span></span><br><span class="line">ui-&gt;axWidget-&gt;<span class="built_in">dynamicCall</span>(<span class="string">&quot;SetMenubar(bool)&quot;</span>, <span class="literal">false</span>); <span class="comment">// 隐藏菜单栏</span></span><br><span class="line">ui-&gt;axWidget-&gt;<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure><h2 id="dsoframer-source">dsoframer-source</h2><p><a href="https://github.com/hueidou/DsoFramer">https://github.com/hueidou/DsoFramer</a></p><p><img src="/assets/images/dsoframer-source.png" alt="dsoframer-source"></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QDataStream</title>
      <link href="/2022/03/22/Qt/QDataStream/"/>
      <url>/2022/03/22/Qt/QDataStream/</url>
      
        <content type="html"><![CDATA[<h2 id="QDataStream">QDataStream</h2><h2 id="QDataStream-writeBytes">QDataStream::writeBytes</h2><blockquote><p>QDataStream &amp;QDataStream::writeBytes(const char *s, uint len)<br>Writes the length specifier len and the buffer s to the stream and returns a reference to the stream.<br>The len is serialized as a quint32, followed by len bytes from s. Note that the data is not encoded.</p></blockquote><p>注意，使用<code>writeBytes</code>函数写的文件，必须用<code>readBytes</code>函数读取，<code>readBytes</code>函数是个工厂函数，会调用<code>new[]</code>分配内存，因此需要调用<code>delete[]</code>进行删除内存，否则会泄露。</p><p>有特殊字符，比如<code>∅ ㎡ 㘵</code>，写入后再次读取，结果乱码。</p><h2 id="QDataStream-writeRawData">QDataStream::writeRawData</h2><blockquote><p>int QDataStream::writeRawData(const char *s, int len)<br>Writes len bytes from s to the stream. Returns the number of bytes actually written, or -1 on error. The data is not encoded.</p></blockquote><p><code>int QDataStream::writeRawData(const char * s, int len)</code>和<code>int QDataStream::readRawData(char * s, int len)</code>函数配对使用，用于写入最原始的内存，如果不想要Qt独有的一些信息，就需要用这两个函数。</p><h2 id="QDataStream-2">QDataStream&lt;&lt;</h2><blockquote><p>QDataStream &amp;QDataStream::operator&lt;&lt;(Type i)<br>Writes a signed byte, i, to the stream and returns a reference to the stream.</p></blockquote><p>有特殊字符，比如<code>∅ ㎡ 㘵</code>，写入后再次读取，结果正确。</p><h2 id="总结">总结</h2><p>在写出二进制时，如果需要仅仅写入原始的内存，记得使用<code>int QDataStream::writeRawData(const char * s, int len)</code>函数，而不是<code>QDataStream::writeBytes</code>函数！</p><p>有特殊字符，比如<code>∅ ㎡ 㘵</code>，使用<code>QDataStream&lt;&lt;</code></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt问题-Qt-connect-没有调用槽函数</title>
      <link href="/2022/03/07/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-Qt-connect-%E6%B2%A1%E6%9C%89%E8%B0%83%E7%94%A8%E6%A7%BD%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/07/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-Qt-connect-%E6%B2%A1%E6%9C%89%E8%B0%83%E7%94%A8%E6%A7%BD%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Qt-connect-没有调用槽函数">Qt connect 没有调用槽函数</h2><p>Qt connect 自定义类型要注册<br><img src="/assets/images/QtProblems-qt-connect-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%A6%81%E6%B3%A8%E5%86%8C.png" alt="qt-connect-自定义类型要注册"></p>]]></content>
      
      
      <categories>
          
          <category> QtProblems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtProblems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt问题-QSettings读取注册表</title>
      <link href="/2022/02/17/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-QSettings%E8%AF%BB%E5%8F%96%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
      <url>/2022/02/17/Qt/QtProblems/Qt%E9%97%AE%E9%A2%98-QSettings%E8%AF%BB%E5%8F%96%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="QSettings读取注册表问题">QSettings读取注册表问题</h2><h2 id="问题描述">问题描述</h2><p><code>QSettings</code>在<code>32-bit</code>程序中访问&quot;\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall&quot;是可以的，<br>但是访问不了&quot;\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall&quot;，<br>在<code>64-bit</code>程序中访问上面的都可以。</p><h2 id="问题分析">问题分析</h2><p>1<br>在<code>Microsoft</code>文档中有相关说明：<a href="https://docs.microsoft.com/zh-cn/windows/win32/winprog64/accessing-an-alternate-registry-view?redirectedfrom=MSDN">访问备用注册表视图</a></p><p><img src="/assets/images/QtProblems-%E8%AE%BF%E9%97%AE%E5%A4%87%E7%94%A8%E6%B3%A8%E5%86%8C%E8%A1%A8%E8%A7%86%E5%9B%BE.png" alt="访问备用注册表视图"></p><p>2<br>QSetting访问注册表问题<br>发现这两个注册表节点<br>“\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall”<br>“\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall”<br>在QSetting加载第一个节点时，会自动重定向到第二个上面<br>有什么办法正确的访问第一个吗<br>Win10</p><p>用win api关闭重定向即可，操作前关闭，操作后恢复</p><p>64位系统下的32位程序是这样的<br>除非你是多个程序配合开发，否则不建议改</p><h2 id="问题解决">问题解决</h2><p>在QT下使用msvc或minGW时记得在<code>pro</code>中添加：<code>LIBS += -lsetupapi -ladvapi32</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> QString REG_UNINSTALL             = <span class="string">R&quot;(Software\Microsoft\Windows\CurrentVersion\Uninstall\xx)&quot;</span>;</span><br><span class="line"><span class="type">const</span> QString REG_WOW6432Node_UNINSTALL = <span class="string">R&quot;(Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\xx)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> strSubKeys = &#123; REG_WOW6432Node_UNINSTALL, REG_UNINSTALL &#125;;</span><br><span class="line">HKEY hKey = HKEY_LOCAL_MACHINE;</span><br><span class="line">REGSAM samDesired = KEY_ALL_ACCESS;</span><br><span class="line"><span class="keyword">if</span> (strSubKey.<span class="built_in">contains</span>(<span class="string">&quot;WOW6432Node&quot;</span>, Qt::CaseInsensitive)) &#123;</span><br><span class="line">    samDesired |= KEY_WOW64_32KEY;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    samDesired |= KEY_WOW64_64KEY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">RegOpenKeyExA</span>(hKey, strSubKey.<span class="built_in">toStdString</span>().<span class="built_in">c_str</span>(), <span class="literal">NULL</span>, samDesired, &amp;hKey) == ERROR_SUCCESS) &#123;</span><br><span class="line">    DWORD dwSize;</span><br><span class="line">    dwSize = <span class="built_in">sizeof</span>(tchDataDisplayicon);</span><br><span class="line">    <span class="built_in">RegQueryValueExA</span>(hKey, REG_DISPLAYICON, <span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPBYTE)tchDataDisplayicon, &amp;dwSize);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; strSubKey &lt;&lt; QString::<span class="built_in">fromLocal8Bit</span>(tchDataDisplayicon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QtProblems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QtProblems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tdesktop-3-源码初探</title>
      <link href="/2022/01/25/OpenSourceProjects/tdesktop/tdesktop-3-%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/"/>
      <url>/2022/01/25/OpenSourceProjects/tdesktop/tdesktop-3-%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="tdesktop-源码初探">tdesktop 源码初探</h2><p>折腾一番后。。。</p><p><img src="/assets/images/tdesktop-rpl.png" alt="tdesktop-rpl"></p><p>直接放弃了。</p>]]></content>
      
      
      <categories>
          
          <category> tdesktop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> tdesktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tdesktop-1-编译</title>
      <link href="/2022/01/21/OpenSourceProjects/tdesktop/tdesktop-1-%E7%BC%96%E8%AF%91/"/>
      <url>/2022/01/21/OpenSourceProjects/tdesktop/tdesktop-1-%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h2 id="tdesktop-编译">tdesktop 编译</h2><p><code>tdesktop</code> 的 <code>github</code> 上有介绍编译步骤：<a href="https://github.com/telegramdesktop/tdesktop/blob/dev/docs/building-win-x64.md">tdesktop-building-win-x64</a></p><p>Choose an empty folder for the future build, for example <code>D:\TBuild</code>. It will be named <code>BuildPath</code> in the rest of this document. Create two folders there, <code>BuildPath\ThirdParty</code> and <code>BuildPath\Libraries</code>.<br><img src="/assets/images/tdesktop-build-folder.png" alt="tdesktop-build-folder"></p><p>按照官方文档把所需要的第三方软件安装到对应的位置</p><!-- ![tdesktop-build-install-third-party-software](/assets/images/tdesktop-build-install-third-party-software.png) --><p>Download Strawberry Perl installer from <a href="http://strawberryperl.com/">http://strawberryperl.com/</a> and install to BuildPath\ThirdParty\Strawberry<br>Download NASM installer from <a href="http://www.nasm.us">http://www.nasm.us</a> and install to BuildPath\ThirdParty\NASM<br>Download Yasm executable from <a href="http://yasm.tortall.net/Download.html">http://yasm.tortall.net/Download.html</a>, rename to yasm.exe and put to BuildPath\ThirdParty\yasm<br>Download MSYS2 installer from <a href="http://www.msys2.org/">http://www.msys2.org/</a> and install to BuildPath\ThirdParty\msys64<br>Download jom archive from <a href="http://download.qt.io/official_releases/jom/jom.zip">http://download.qt.io/official_releases/jom/jom.zip</a> and unpack to BuildPath\ThirdParty\jom<br>Download Python 3.9 installer from <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a> and install to BuildPath\ThirdParty\Python39<br>Download CMake 3.21 or later installer from <a href="https://cmake.org/download/">https://cmake.org/download/</a> and install to BuildPath\ThirdParty\cmake<br>Download Ninja executable from <a href="https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-win.zip">https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-win.zip</a> and unpack to BuildPath\ThirdParty\Ninja<br>Download Git installer from <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> and install it.<br>Download NuGet executable from <a href="https://dist.nuget.org/win-x86-commandline/latest/nuget.exe">https://dist.nuget.org/win-x86-commandline/latest/nuget.exe</a> and put to BuildPath\ThirdParty\NuGet</p><p>Add Python 3.9 and NuGet to your PATH:</p><p>Open Control Panel -&gt; System -&gt; Advanced system settings.<br>Press Environment Variables…<br>Select Path.<br>Press Edit.<br>Add <code>BuildPath\ThirdParty\Python39</code> value.<br>Add <code>BuildPath\ThirdParty\NuGet</code> value.</p><p><a href="./tdesktop-thirdparty-software.zip">所需要的第三方软件打包</a></p><p><img src="/assets/images/tdesktop-build-tool.png" alt="tdesktop-build-tool"></p><p><code>tdesktop</code>最新的源码编译工具是使用<code>vs2022</code>，可以下载安装社区版<br>打开<code>vs2022 x64</code>命令行窗口<br><img src="/assets/images/tdesktop-build-vs2022.png" alt="tdesktop-build-vs2022"></p><p>Open x64 Native Tools Command Prompt for VS 2022.bat, go to <code>BuildPath</code> and run</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install pywin32</span><br></pre></td></tr></table></figure><p>Clone source code and prepare libraries<br>Open <code>x64 Native Tools Command Prompt for VS 2022.bat</code>, go to <code>BuildPath</code> and run</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/telegramdesktop/tdesktop.git</span><br><span class="line">tdesktop\Telegram\build\prepare\win.bat</span><br></pre></td></tr></table></figure><blockquote><p>注意: 这里克隆子目录有可能会失败，可以到<code>tdesktop-github-tree</code>打开对应的仓库自行下载并切换到指定的提交</p></blockquote><p>这里的每个库都要安装编译成功<br><img src="/assets/images/tdesktop-build.png" alt="tdesktop-build"></p><p>如果没有梯子，可以通过修改<code>prepare.py</code>脚本解决<br>打开<code>\BuildPath\tdesktop\Telegram\build\prepare\prepare.py</code>把无法下载的仓库地址替换成<code>github</code>上对应的仓库<br><a href="./prepare-modify-for-git.py">prepare-modify-for-git.py</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure.bat x64 -D TDESKTOP_API_ID=17349 -D TDESKTOP_API_HASH=344583e45741c457fe1862106095a5eb -D DESKTOP_APP_USE_PACKAGED=OFF -D DESKTOP_APP_DISABLE_CRASH_REPORTS=OFF</span><br></pre></td></tr></table></figure><p>对应的 api 在这里 <a href="https://github.com/telegramdesktop/tdesktop/blob/dev/docs/api_credentials.md">tdesktop-api_credentials</a></p><h2 id="结果">结果</h2><p><img src="/assets/images/tdesktop-sln.png" alt="tdesktop-sln"><br><img src="/assets/images/tdesktop-vs2022.png" alt="images/tdesktop-vs2022"><br><img src="/assets/images/result.png" alt="tdesktop-result"></p><p>为了更好的调试，可以在<code>vs2022</code>安装<code>Qt Visual Studio Tools</code>扩展<br>Qt Visual Studio Tools<br>For better debugging you may want to install Qt Visual Studio Tools:</p><p>Open Extensions -&gt; Manage Extensions<br>Go to Online tab<br>Search for Qt<br>Install Qt Visual Studio Tools extension</p><h2 id="问题">问题</h2><p>1.安装 MSYS2<br><img src="/assets/images/msys2-updating-trust-database.png" alt="msys2-updating-trust-database"></p><p>2.安装Python<br><img src="/assets/images/No%20python%20installation%20was%20detected.png" alt="No python installation was detectedNo python installation was detected"></p><p>3.vs-error-C2220<br><img src="/assets/images/vs-error-C2220.png" alt="vs-error-C2220"></p>]]></content>
      
      
      <categories>
          
          <category> tdesktop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> tdesktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Q_D指针</title>
      <link href="/2022/01/13/Qt/Q_D%E6%8C%87%E9%92%88/"/>
      <url>/2022/01/13/Qt/Q_D%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="Q-D指针">Q_D指针</h2><blockquote><p>转载：[<a href="https://wiki.qt.io/D-Pointer/zh">https://wiki.qt.io/D-Pointer/zh</a>]</p></blockquote><h2 id="什么是-d-pointer">什么是 d-pointer</h2><p>如果你曾经查看过Qt的源代码文件，例如 <a href="http://qt.gitorious.com/qt/qt/blobs/master/src/gui/widgets/qlabel.cpp">这个</a> <code>Q_D</code> 和 <code>Q_Q</code> 宏定义。本文就来揭开这些宏使用的目的。</p><p><code>Q_D</code> 和 <code>Q_Q</code> 宏定义是d-pointer(也被称为 <a href="http://en.wikipedia.org/wiki/Opaque_pointer">opaque pointer</a>)设计模式的一部分, 它可以把一个类库的实施细节对使用的用户隐藏， 而且对实施的更改不会打破二进制兼容。</p><h2 id="什么是二进制兼容">什么是二进制兼容</h2><p>在设计像 Qt 这样的类库的时候，理想的行为应该是动态连接到 Qt 的应用程序，甚至在 Qt 类库升级或者替换到另外一个版本的时候，不需要重新编译就可以继续运行。例如，你的应用程序 <em>CuteApp</em> 是基于 Qt 4.5 的，你应该可以把你的 Qt 由4.5升级到 Qt 4.6 （在 Windows 下用安装程序，在 Linux 下通常有包管理器自动完成），而你用 Qt 4.5 构建的 CuteApp 应该还可以运行。</p><h2 id="什么会打破二进制兼容">什么会打破二进制兼容</h2><p>那么，什么时候类库的变化需要应用程序的重新编译呢？ 我们来看一个简单的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Rect m_geometry;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Label</span> : <span class="keyword">public</span> Widget &#123;</span><br><span class="line"><span class="function">String <span class="title">text</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_text; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">String m_text;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里，我们有一个 Widget， 包含一个 geometry 作为成员变量。 我们编译 Widget 并且发布为 <em><strong>WidgetLib 1.0</strong></em>。</p><p>对于 <em><strong>WidgetLib 1.1</strong></em> ， 有人有了新的主意要添加样式表支持。没问题，我们只需要添加一个新的方法和一个新的 <em>数据成员</em>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Rect m_geometry;</span><br><span class="line">String m_stylesheet; <span class="comment">// NEW in WidgetLib 1.1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Label</span> : <span class="keyword">public</span> Widget &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">String <span class="title">text</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_text; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">String m_text;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们发布 WidgetLib 1.1，仅仅包含上面的变化，却发现和 WidgetLib 1.0一起编译并且运行正常的 CuteApp 光荣地崩溃了！</p><h2 id="为什么会崩溃">为什么会崩溃</h2><p>究其原因，通过添加了一个新的数据成员，我们最终改变了 <code>Widget</code> 和 <code>Label</code> 对象的大小。为什么会这样？因为当你的C++编译器生成代码的时候，他会用<code>偏移量</code>来访问对象的数据。</p><p>下面是一个 POD 对象在内存里面布局的一个简化版本。</p><table><thead><tr><th style="text-align:center"><code>Label 对象在 WidgetLib 1.0的布局</code></th><th style="text-align:center"><code>Label 对象在 WidgetLib 1.1的布局</code></th></tr></thead><tbody><tr><td style="text-align:center">m_geometry &lt;偏移量 0&gt;</td><td style="text-align:center">m_geometry &lt;偏移量 0&gt;</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">m_stylesheet &lt;偏移量 1&gt;</td></tr><tr><td style="text-align:center">m_text &lt;偏移量 1&gt;</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">m_text &lt;偏移量 2&gt;</td></tr></tbody></table><p>在 WidgetLib 1.0中，Label 的 text 成员在（逻辑）偏移量为1的位置。在编译器生成的代码里，应用程序的方法 <code>Label::text()</code> 被翻译成访问 Label 对象里面偏移量为1的位置。<br>在 WidgetLib 1.1中，Label 的 text 成员的（逻辑）偏移量被转移到了2的位置！由于应用程序没有重新编译，它仍然认为 <code>text</code> 在偏移量1的位置，结果却访问了 <code>stylesheet</code> 变量！</p><p>我确信，这个时候，会有人问，为什么<code>Label::text()</code>的偏移量的计算的代码会在CuteApp二进制文件结束，而不是在WidgetLib的二进制文件。 答案是因为<code>Label::text()</code> 的代码定义在头文件里面，最终被<a href="http://en.wikipedia.org/wiki/Inline_function">内联</a>。</p><p>那么，如果 <code>Label::text()</code> 没有定义为内联函数，情况会改变吗？这么讲，<code>Label::text()</code> 被移到源文件里面？嗯，不会。C编译器依赖对象大小在编译时和运行时相同。比如，堆栈的 winding/unwinding - 如果你在堆栈上创建了一个 Label 对象， 编译器产生的代码会根据 Label 对象在编译时的大小在堆栈上分配空间。由于Label的大小在 WidgetLib 1.1 运行时已经不同，Label 的构造函数会覆盖已经存在的堆栈数据，最终破坏堆栈。</p><h2 id="不要改变导出的-C-类的大小">不要改变导出的 C++ 类的大小</h2><p>总之，一旦你的类库发布了，永远不要改变 <em>导出的</em> C++ 类的大小或者布局（不要移动成员）。C++ 编译器生成的代码会假定，一个类的大小和成员的顺序 <em>编译后</em> 就不会改变.</p><p>那么，如何在不改变对象的大小的同时添加新的功能呢？</p><h2 id="d-pointer">d-pointer</h2><p>诀窍是通过保存唯一的一个指针而保持一个类库所有公共类的大小不变。这个指针指向一个包含所有数据的私有的（内部的）数据结构。内部结构的大小可以增大或者减小，而不会对应用程序带来副作用，因为指针只会被类库里面的代码访问，从应用程序的视角来看，对象的大小并没有改变 - 它永远是指针的大小。 这个指针被叫做 <em>d-pointer</em> 。</p><p>这个模式的精髓可以由下面的代码来概述（本文中的所有代码都没有析构函数，在实际使用的时候应该加上它）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* widget.h */</span></span><br><span class="line"><span class="comment">// 前置声明. 定义在 widget.cpp 或者</span></span><br><span class="line"><span class="comment">// 单独的一个文件，比如 widget_p.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WidgetPrivate</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line"><span class="function">Rect <span class="title">geometry</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// d-pointer never referenced in header file.</span></span><br><span class="line"><span class="comment">// Since WidgetPrivate is not defined in this header,</span></span><br><span class="line"><span class="comment">// any access will be a compile error</span></span><br><span class="line">WidgetPrivate *d_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* widget_p.h */</span> (_p 意味着私有)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">WidgetPrivate</span> &#123;</span><br><span class="line">Rect geometry;</span><br><span class="line">String stylesheet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* widget.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget_p.h&quot;</span></span></span><br><span class="line">Widget::<span class="built_in">Widget</span>()</span><br><span class="line">: <span class="built_in">d_ptr</span>(<span class="keyword">new</span> WidgetPrivate) &#123;</span><br><span class="line"><span class="comment">// 创建私有数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Rect <span class="title">Widget::geoemtry</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="comment">// d-ptr 仅仅被类库代码访问</span></span><br><span class="line"><span class="keyword">return</span> d_ptr-&gt;geometry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* label.h */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Label</span> : <span class="keyword">public</span> Widget &#123;</span><br><span class="line"><span class="function">String <span class="title">text</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 每个类维护自己的 d-pointer</span></span><br><span class="line">LabelPrivate *d_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* label.cpp */</span></span><br><span class="line"><span class="comment">// 和 WidgetPrivate 不同, 我们在它自己的源文件里定义 LabelPrivate</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LabelPrivate</span> &#123;</span><br><span class="line">String text;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Label::<span class="built_in">Label</span>()</span><br><span class="line">: <span class="built_in">d_ptr</span>(<span class="keyword">new</span> LabelPrivate) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">Label::text</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> d_ptr-&gt;text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了上面的机构，CuteApp 从来不需要直接访问 d-pointer。由于 <em>d-pointer</em> 只是在 WidgetLib 被访问，而 WidgetLib 在每一次发布都被重新编译，私有的类可以随意的改变而不会对 CuteApp 带来影响。</p><h2 id="d-pointer-的其它好处">d-pointer 的其它好处</h2><p>这里不全都是和二进制兼容有关。d-pointer 还有其它的好处：</p><ul><li>隐藏了实现细节 - 我们可以只发布带有头文件和二进制文件的 WidgetLib。源文件可以是闭源代码的。</li><li>头文件很干净，不包含实现细节，可以直接作为 API 参考。</li><li>由于实施需要的包含的头文件从头文件里已到了实施（源文件）里面，编译速更快。（译：降低了编译依赖）</li></ul><p>事实上，上边的好处是微乎其微的。Qt 使用 d-pointer 的真正原因是为了二进制兼容和 Qt 最初是封闭源代码的.（译：Qt 好像没有封闭源代码）</p><h2 id="q-pointer">q-pointer</h2><p>到目前为止，我们仅仅看到的是作为 C 风格的数据机构的 d-pointer。实际上，它可以包含私有的方法（辅助函数）。例如，<code>LabelPrivate</code> 可以有一个<code>getLinkTargetFromPoint()</code> 辅助函数，当鼠标点击的时候找到目标链接。在很多情况下，这些辅助函数需要访问公有类，也就是 Label 或者它的父类 Widget 的一些函数。比如，一个辅助函数 <code>setTextAndUpdateWidget()</code> 想要调用一个安排重画Widget的公有方法 <code>Widget::update()</code>。所以，<code>WidgetPrivate</code> 存储了一个指向公有类的指针，称为q-pointer。修改上边的代码引入q-pointer，我们得到下面代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* widget.h */</span></span><br><span class="line"><span class="comment">// 前置声明. 定义在 widget.cpp</span></span><br><span class="line"><span class="comment">// 或者单独的一个文件，比如 widget_p.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WidgetPrivate</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line">…</span><br><span class="line"><span class="function">Rect <span class="title">geometry</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">…</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// d-pointer 从来不在头文件被引用</span></span><br><span class="line"><span class="comment">// 因为WidgetPrivate没有在头文件里定义,</span></span><br><span class="line"><span class="comment">// 所有对它的访问都会带来编译错误</span></span><br><span class="line">WidgetPrivate *d_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* widget_p.h */</span> (_p意味着私有)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">WidgetPrivate</span> &#123;</span><br><span class="line"><span class="comment">// constructor that initializes the q-ptr</span></span><br><span class="line"><span class="built_in">WidgetPrivate</span>(Widget *q) : <span class="built_in">q_ptr</span>(q) &#123; &#125;</span><br><span class="line">Widget *q_ptr; <span class="comment">// q-ptr that points to the API class</span></span><br><span class="line">Rect geometry;</span><br><span class="line">String stylesheet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* widget.cpp */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget_p.h&quot;</span></span></span><br><span class="line"><span class="comment">// create private data. pass the &#x27;this&#x27; pointer to initialize the q-ptr</span></span><br><span class="line">Widget::<span class="built_in">Widget</span>()</span><br><span class="line">: <span class="built_in">d_ptr</span>(<span class="keyword">new</span> <span class="built_in">WidgetPrivate</span>(<span class="keyword">this</span>)) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Rect <span class="title">Widget::geoemtry</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="comment">// the d-ptr is only accessed in the library code</span></span><br><span class="line"><span class="keyword">return</span> d_ptr-&gt;geometry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* label.h */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Label</span> : <span class="keyword">public</span> Widget &#123;</span><br><span class="line"><span class="function">String <span class="title">text</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">LabelPrivate *d_ptr; <span class="comment">// each class maitains it&#x27;s own d-pointer</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* label.cpp */</span></span><br><span class="line"><span class="comment">// Unlike WidgetPrivate, we define LabelPrivate in the source file</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LabelPrivate</span> &#123;</span><br><span class="line"><span class="built_in">LabelPrivate</span>(Label *q) : <span class="built_in">q_ptr</span>(q) &#123; &#125;</span><br><span class="line">Label *q_ptr;</span><br><span class="line">String text;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Label::<span class="built_in">Label</span>()</span><br><span class="line">: <span class="built_in">d_ptr</span>(<span class="keyword">new</span> <span class="built_in">LabelPrivate</span>(<span class="keyword">this</span>)) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">Label::text</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> d_ptr-&gt;text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进一步优化">进一步优化</h2><p>对于上边的代码，创建一个 Label 会带来 <code>LabelPrivate</code> 和 <code>WidgetPrivate</code> 的内存分配。如果我们在Qt里面采用这种策略，对已一些像 <code>QListWidget</code> 的类，情况会相当糟糕 - 它有6层的继承层次，也就会带来最多6次的内存分配。</p><p>通过对我们的 <em>私有</em> 类添加一个继承层次，解决了这个问题，这样类实例化时将一个 d-pointer 层层向上传递。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* widget.h */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Widget</span>();</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// only sublasses may access the below</span></span><br><span class="line"><span class="built_in">Widget</span>(WidgetPrivate &amp;d); <span class="comment">// 允许子类通过他们自己的实体私有对象来初始化</span></span><br><span class="line">WidgetPrivate *d_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* widget_p.h */</span> (_p means <span class="keyword">private</span>)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">WidgetPrivate</span> &#123;</span><br><span class="line"><span class="built_in">WidgetPrivate</span>(Widget *q) : <span class="built_in">q_ptr</span>(q) &#123; &#125; <span class="comment">// 构造函数初始化 q-ptr</span></span><br><span class="line">Widget *q_ptr; <span class="comment">// 指向API类的</span></span><br><span class="line">Rect geometry;</span><br><span class="line">String stylesheet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* widget.cpp */</span></span><br><span class="line">Widget::<span class="built_in">Widget</span>()</span><br><span class="line">: <span class="built_in">d_ptr</span>(<span class="keyword">new</span> <span class="built_in">WidgetPrivate</span>(<span class="keyword">this</span>)) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(WidgetPrivate &amp;d)</span><br><span class="line">: <span class="built_in">d_ptr</span>(&amp;d) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* label.h */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Label</span> : <span class="keyword">public</span> Widget &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Label</span>();</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">Label</span>(LabelPrivate &amp;d); <span class="comment">// 允许Label的子类传递自己的私有数据</span></span><br><span class="line"><span class="comment">//注意 Label 没有 d_ptr！它用了父类 Widget 的 d_ptr。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget_p.h&quot;</span> <span class="comment">// 所以我们能够访问 WidgetPrivate</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LabelPrivate</span> : <span class="keyword">public</span> WidgetPrivate &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    String text;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Label::<span class="built_in">Label</span>() : <span class="built_in">Widget</span>(*<span class="keyword">new</span> LabelPrivate) &#123;</span><br><span class="line"> <span class="comment">// 用我们自己的私有对象来初始化 d-pointer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Label::<span class="built_in">Label</span>(LabelPrivate &amp;d) : <span class="built_in">Widget</span>(d) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很漂亮？现在当我们创建一个 <code>Label</code> 对象时，它会创建一个 <code>LabelPrivate</code>（它继承了 <code>WidgetPrivate</code>）。它把一个 <em>d-pointer</em> 实体传递给Widget的保护的构造函数。Label 也有这样一个保护的构造函数，可以被继承 <code>Label</code> 的类提供自己的私有类来使用。</p><h2 id="把-q-ptr-和-d-ptr-转型到正确的类型（QPTR-和-DPTR）">把 q-ptr 和 d-ptr 转型到正确的类型（QPTR 和 DPTR）</h2><p>上一步优化的一个副作用是 q-ptr 和 d-ptr 的类型分别是 <code>Widget</code> 和 <code>WidgetPrivate</code>。<br>这就意味着下面的代码不能工作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Label::setText</span><span class="params">(<span class="type">const</span> String &amp;text)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 不工作。虽然 d_ptr 指向 LabelPrivate 对象，但是它是 WidgetPrivate 类型</span></span><br><span class="line">d_ptr-&gt;text = text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，在子类里访问 d-pointer 的时候，需要用 static_cast 转型到合适的类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Label::setText</span><span class="params">(<span class="type">const</span> String &amp;text)</span> </span>&#123;</span><br><span class="line">LabelPrivate *d = <span class="built_in">static_cast</span>&lt;LabelPrivate*&gt;(d_ptr); <span class="comment">// cast to our private type</span></span><br><span class="line">d-&gt;text = text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码里到处都是 static_cast 看起来不是那么漂亮，所以我们定义了下面的宏，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// global.h (macros)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DPTR (Class) Class##Private *d = static_cast<span class="string">&lt;Class##Private*&gt;</span>(d_ptr)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QPTR (Class) Class *q = static_cast<span class="string">&lt;Class*&gt;</span>(q_ptr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// label.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Label::setText</span><span class="params">(<span class="type">const</span> String &amp;text)</span> </span>&#123;</span><br><span class="line"><span class="built_in">DPTR</span> (Label);</span><br><span class="line">d-&gt;text = text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LabelPrivate::someHelperFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">QPTR</span> (label);</span><br><span class="line">q-&gt;<span class="built_in">selectAll</span>(); <span class="comment">// we can call functions in Label now</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Qt-中的-d-pointers">Qt 中的 d-pointers</h2><p>在 Qt 中，几乎所有的公有类都使用了 d-pointer。唯一不用的情况是如果事先知道某个类永远不会添加额外的成员变量。例如，像 <code>QPoint</code>, <code>QRect</code> 这些类，我们不期望有新的成员添加，因此它们的数据成员直接保存在类里而没用 d-pointer。</p><ul><li>在Qt中，所有私有对象的基类是 <code>QObjectPrivate</code></li><li><code>Q_D</code>和<code>Q_Q</code> 宏提供了上边讨论的 QPTR 和 DPTR 的功能.</li><li>Qt 的公有类有一个 <code>Q_DECLARE_PRIVATE</code> 的宏。这个宏的代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// qlabel.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLabel</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Q_DECLARE_PRIVATE</span>(QLabel);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// qglobal.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Q_DECLARE_PRIVATE(Class) \</span></span><br><span class="line"><span class="meta">    inline Class##Private* d_func() \</span></span><br><span class="line"><span class="meta">    &#123; Q_CAST_IGNORE_ALIGN(return reinterpret_cast<span class="string">&lt;Class##Private *&gt;</span>(qGetPtrHelper(d_ptr));) &#125; \</span></span><br><span class="line"><span class="meta">    inline const Class##Private* d_func() const \</span></span><br><span class="line"><span class="meta">    &#123; Q_CAST_IGNORE_ALIGN(return reinterpret_cast<span class="string">&lt;const Class##Private *&gt;</span>(qGetPtrHelper(d_ptr));) &#125; \</span></span><br><span class="line"><span class="meta">    friend class Class##Private;</span></span><br></pre></td></tr></table></figure><p>这里的想法是 <code>QLabel</code> 提供了一个函数 <code>d_func()</code> 允许访问它的私有内部类。这个方法本身是私有的（因为这个宏定义在 qlabel.h 私有区域）。 但是 <code>d_func()</code> 可以被 <code>QLabel</code> 的 <em>友元函数</em> (C++ 友元)调用。这主要对一些 Qt 类想获得 <code>QLabel</code> 的无法通过公有 API 访问的一些信息有用。例如，<code>QLabel</code> 可能要跟踪用户点击了一个链接多少次。但是没有公有 API 访问这个信息。<code>QStatistics</code> 是需要这个信息的一个类。Qt开发人员可以添加 <code>QStatistics</code> 作为 <code>QLabel</code> 的一个友元类，这样<code>QStatistics</code> 就可以 <code>label-&gt;d_func()-&gt;linkClickCount</code> 来访问。</p><p><code>d_func</code> 还有一个优点是保证了const正确性：在 MyClass 的一个 const 成员函数里，你需要 Q_D(const MyClass)，因此你只能调用 MyClassPrivate 的const成员函数。如果用 “naked” 的 d_ptr 你可以调用非const函数。</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images-6</title>
      <link href="/2021/04/02/Hexo-Blog/Test-Images-6/"/>
      <url>/2021/04/02/Hexo-Blog/Test-Images-6/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images-6">Test-Images-6</h2><p>测试图片显示</p><p><img src="/assets/images/%E5%A4%B4%E5%83%8F.jpg" alt="头像"></p><p><img src="/assets/images/arrow_top_hover.png" alt="arrow_top_hover"></p><p>Test-Images-6</p><p><img src="/assets/images/art-car.png" alt="art-car"></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images-5</title>
      <link href="/2021/04/01/Hexo-Blog/Test-Images-5/"/>
      <url>/2021/04/01/Hexo-Blog/Test-Images-5/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images-4-2">Test-Images-4</h2><p>测试图片显示</p><p>Test-Images-5</p><p><img src="/assets/images/art-car.png" alt="art-car"></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images-4</title>
      <link href="/2021/04/01/Hexo-Blog/Test-Images-4/"/>
      <url>/2021/04/01/Hexo-Blog/Test-Images-4/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images-4">Test-Images-4</h2><p>测试图片显示</p><p><img src="/assets/images/nvm-install-nodejs-error.png" alt="nvm-install-nodejs-error"></p><p>Test-Images-4</p><p><img src="/assets/images/art.png" alt="art"></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images-3</title>
      <link href="/2021/04/01/Hexo-Blog/Test-Images-3/"/>
      <url>/2021/04/01/Hexo-Blog/Test-Images-3/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images-3">Test-Images-3</h2><p>测试图片显示</p><p><img src="/assets/images/hexo-theme.png" alt="hexo-theme"></p><p>Test-Images-3</p><p><img src="/assets/images/refresh_hover.png" alt="hexo-themeTest-Images-3"></p><p>end.</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test-Images</title>
      <link href="/2021/04/01/Hexo-Blog/Test-images/"/>
      <url>/2021/04/01/Hexo-Blog/Test-images/</url>
      
        <content type="html"><![CDATA[<h2 id="Test-Images">Test-Images</h2><p>在另一个工作环境编写博客<br><img src="/assets/images/blog.png" alt="blog"><br>![blog-1]/images/(blog-1.png)<br><img src="/assets/images/blog-2.png" alt="blog-2"></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog-env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Edit-Blog-With-Another-Workspace</title>
      <link href="/2021/04/01/Hexo-Blog/Edit-Blog-With-Another-Workspace/"/>
      <url>/2021/04/01/Hexo-Blog/Edit-Blog-With-Another-Workspace/</url>
      
        <content type="html"><![CDATA[<h2 id="Edit-Blog-With-Another-Workspace">Edit-Blog-With-Another-Workspace</h2><p>在另一个工作环境编写博客<br><img src="/assets/images/blog.png" alt="blog"><br><img src="/assets/images/blog-1.png" alt="blog-1"><br><img src="/assets/images/blog-2.png" alt="blog-2"></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog-env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/03/01/Hexo-Blog/hello-world/"/>
      <url>/2021/03/01/Hexo-Blog/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
